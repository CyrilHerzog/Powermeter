
Powermeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d24  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08001ddc  08001ddc  00011ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002280  08002280  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002280  08002280  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002280  08002280  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002280  08002280  00012280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002284  08002284  00012284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001880  20000028  080022b0  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018a8  080022b0  000218a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ccc  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000df1  00000000  00000000  00023d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000268  00000000  00000000  00024b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e0  00000000  00000000  00024d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001a4a  00000000  00000000  00024f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c3d  00000000  00000000  000269a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000067b4  00000000  00000000  000295df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002fd93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000688  00000000  00000000  0002fde4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000028 	.word	0x20000028
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001dc4 	.word	0x08001dc4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000002c 	.word	0x2000002c
 80000fc:	08001dc4 	.word	0x08001dc4

08000100 <adc_reset>:
#include <adc.h>

#define ADC_TIMEOUT (uint32_t)0x100   // 10ms


void adc_reset(){
 8000100:	b580      	push	{r7, lr}
 8000102:	af00      	add	r7, sp, #0
	RCC_APB2RSTR |= APBx_ADC;
 8000104:	4b07      	ldr	r3, [pc, #28]	; (8000124 <adc_reset+0x24>)
 8000106:	681a      	ldr	r2, [r3, #0]
 8000108:	4b06      	ldr	r3, [pc, #24]	; (8000124 <adc_reset+0x24>)
 800010a:	2180      	movs	r1, #128	; 0x80
 800010c:	0089      	lsls	r1, r1, #2
 800010e:	430a      	orrs	r2, r1
 8000110:	601a      	str	r2, [r3, #0]
	RCC_APB2RSTR &= ~APBx_ADC;
 8000112:	4b04      	ldr	r3, [pc, #16]	; (8000124 <adc_reset+0x24>)
 8000114:	681a      	ldr	r2, [r3, #0]
 8000116:	4b03      	ldr	r3, [pc, #12]	; (8000124 <adc_reset+0x24>)
 8000118:	4903      	ldr	r1, [pc, #12]	; (8000128 <adc_reset+0x28>)
 800011a:	400a      	ands	r2, r1
 800011c:	601a      	str	r2, [r3, #0]
}
 800011e:	46c0      	nop			; (mov r8, r8)
 8000120:	46bd      	mov	sp, r7
 8000122:	bd80      	pop	{r7, pc}
 8000124:	40021024 	.word	0x40021024
 8000128:	fffffdff 	.word	0xfffffdff

0800012c <adc_init>:

system_err_t adc_init(adc_config_t *pConfig){
 800012c:	b580      	push	{r7, lr}
 800012e:	b086      	sub	sp, #24
 8000130:	af00      	add	r7, sp, #0
 8000132:	6078      	str	r0, [r7, #4]

	uint32_t ticks_pre = get_ticks();
 8000134:	f001 fb20 	bl	8001778 <get_ticks>
 8000138:	0003      	movs	r3, r0
 800013a:	617b      	str	r3, [r7, #20]

	gpio_config_t gpio_cfg;
	gpio_cfg.pin         = pConfig->pin_num;
 800013c:	687b      	ldr	r3, [r7, #4]
 800013e:	781a      	ldrb	r2, [r3, #0]
 8000140:	210c      	movs	r1, #12
 8000142:	187b      	adds	r3, r7, r1
 8000144:	701a      	strb	r2, [r3, #0]
	gpio_cfg.func_mode   = GPIO_FUNC_MODE_ANALOG;
 8000146:	187b      	adds	r3, r7, r1
 8000148:	2203      	movs	r2, #3
 800014a:	705a      	strb	r2, [r3, #1]
	gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 800014c:	187b      	adds	r3, r7, r1
 800014e:	2200      	movs	r2, #0
 8000150:	709a      	strb	r2, [r3, #2]
	gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8000152:	187b      	adds	r3, r7, r1
 8000154:	2200      	movs	r2, #0
 8000156:	711a      	strb	r2, [r3, #4]
	gpio_cfg.speed_mode  = GPIO_SPEED_MODE_LOW_SPEED;
 8000158:	187b      	adds	r3, r7, r1
 800015a:	2200      	movs	r2, #0
 800015c:	70da      	strb	r2, [r3, #3]
	gpio_config(GPIOA, &gpio_cfg);
 800015e:	4b26      	ldr	r3, [pc, #152]	; (80001f8 <adc_init+0xcc>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	187a      	adds	r2, r7, r1
 8000164:	0011      	movs	r1, r2
 8000166:	0018      	movs	r0, r3
 8000168:	f000 f994 	bl	8000494 <gpio_config>

	RCC_APB2ENR |= APBx_ADC;
 800016c:	4b23      	ldr	r3, [pc, #140]	; (80001fc <adc_init+0xd0>)
 800016e:	681a      	ldr	r2, [r3, #0]
 8000170:	4b22      	ldr	r3, [pc, #136]	; (80001fc <adc_init+0xd0>)
 8000172:	2180      	movs	r1, #128	; 0x80
 8000174:	0089      	lsls	r1, r1, #2
 8000176:	430a      	orrs	r2, r1
 8000178:	601a      	str	r2, [r3, #0]
		if ((get_ticks() - ticks_pre) >= ADC_TIMEOUT){
			return ADC_INIT_TIMEOUT;
		}
	}
*/
	ADC_CHSELR  |= ADC_CHSELR_CH0;
 800017a:	4b21      	ldr	r3, [pc, #132]	; (8000200 <adc_init+0xd4>)
 800017c:	681a      	ldr	r2, [r3, #0]
 800017e:	4b20      	ldr	r3, [pc, #128]	; (8000200 <adc_init+0xd4>)
 8000180:	2101      	movs	r1, #1
 8000182:	430a      	orrs	r2, r1
 8000184:	601a      	str	r2, [r3, #0]
	ADC_SMPR    = pConfig->sample_time;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	789a      	ldrb	r2, [r3, #2]
 800018a:	4b1e      	ldr	r3, [pc, #120]	; (8000204 <adc_init+0xd8>)
 800018c:	601a      	str	r2, [r3, #0]
	ADC_CFGR1   = pConfig->resolution;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	785a      	ldrb	r2, [r3, #1]
 8000192:	4b1d      	ldr	r3, [pc, #116]	; (8000208 <adc_init+0xdc>)
 8000194:	601a      	str	r2, [r3, #0]
	ADC_CFGR2   = 0x00;
 8000196:	4b1d      	ldr	r3, [pc, #116]	; (800020c <adc_init+0xe0>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]

	if ((ADC_ISR & ADC_ISR_ADRDY) == ADC_ISR_ADRDY){
 800019c:	4b1c      	ldr	r3, [pc, #112]	; (8000210 <adc_init+0xe4>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2201      	movs	r2, #1
 80001a2:	4013      	ands	r3, r2
 80001a4:	2b01      	cmp	r3, #1
 80001a6:	d105      	bne.n	80001b4 <adc_init+0x88>
		ADC_ISR |= ADC_ISR_ADRDY;
 80001a8:	4b19      	ldr	r3, [pc, #100]	; (8000210 <adc_init+0xe4>)
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	4b18      	ldr	r3, [pc, #96]	; (8000210 <adc_init+0xe4>)
 80001ae:	2101      	movs	r1, #1
 80001b0:	430a      	orrs	r2, r1
 80001b2:	601a      	str	r2, [r3, #0]
	}
	ADC_CR |= ADC_CR_ADEN;
 80001b4:	4b17      	ldr	r3, [pc, #92]	; (8000214 <adc_init+0xe8>)
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	4b16      	ldr	r3, [pc, #88]	; (8000214 <adc_init+0xe8>)
 80001ba:	2101      	movs	r1, #1
 80001bc:	430a      	orrs	r2, r1
 80001be:	601a      	str	r2, [r3, #0]
	while((ADC_ISR & ADC_ISR_ADRDY) == ADC_ISR_ADRDY){
 80001c0:	e008      	b.n	80001d4 <adc_init+0xa8>
		if ((get_ticks() - ticks_pre) >= ADC_TIMEOUT){
 80001c2:	f001 fad9 	bl	8001778 <get_ticks>
 80001c6:	0002      	movs	r2, r0
 80001c8:	697b      	ldr	r3, [r7, #20]
 80001ca:	1ad3      	subs	r3, r2, r3
 80001cc:	2bff      	cmp	r3, #255	; 0xff
 80001ce:	d901      	bls.n	80001d4 <adc_init+0xa8>
			return ADC_INIT_TIMEOUT;
 80001d0:	2301      	movs	r3, #1
 80001d2:	e00c      	b.n	80001ee <adc_init+0xc2>
	while((ADC_ISR & ADC_ISR_ADRDY) == ADC_ISR_ADRDY){
 80001d4:	4b0e      	ldr	r3, [pc, #56]	; (8000210 <adc_init+0xe4>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2201      	movs	r2, #1
 80001da:	4013      	ands	r3, r2
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d0f0      	beq.n	80001c2 <adc_init+0x96>
		}
	}

	ADC_CR |= ADC_CR_ADSTART;
 80001e0:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <adc_init+0xe8>)
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <adc_init+0xe8>)
 80001e6:	2104      	movs	r1, #4
 80001e8:	430a      	orrs	r2, r1
 80001ea:	601a      	str	r2, [r3, #0]

	return SYSTEM_OK;
 80001ec:	2300      	movs	r3, #0

}
 80001ee:	0018      	movs	r0, r3
 80001f0:	46bd      	mov	sp, r7
 80001f2:	b006      	add	sp, #24
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	46c0      	nop			; (mov r8, r8)
 80001f8:	20000000 	.word	0x20000000
 80001fc:	40021034 	.word	0x40021034
 8000200:	40012428 	.word	0x40012428
 8000204:	40012414 	.word	0x40012414
 8000208:	4001240c 	.word	0x4001240c
 800020c:	40012410 	.word	0x40012410
 8000210:	40012400 	.word	0x40012400
 8000214:	40012408 	.word	0x40012408

08000218 <adc_cal>:

system_err_t adc_cal(){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	uint32_t ticks_pre = get_ticks();
 800021e:	f001 faab 	bl	8001778 <get_ticks>
 8000222:	0003      	movs	r3, r0
 8000224:	607b      	str	r3, [r7, #4]

	if((ADC_CR & ADC_CR_ADEN) == ADC_CR_ADEN){
 8000226:	4b27      	ldr	r3, [pc, #156]	; (80002c4 <adc_cal+0xac>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2201      	movs	r2, #1
 800022c:	4013      	ands	r3, r2
 800022e:	2b01      	cmp	r3, #1
 8000230:	d10f      	bne.n	8000252 <adc_cal+0x3a>
		ADC_CR |= ADC_CR_ADDIS;
 8000232:	4b24      	ldr	r3, [pc, #144]	; (80002c4 <adc_cal+0xac>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <adc_cal+0xac>)
 8000238:	2102      	movs	r1, #2
 800023a:	430a      	orrs	r2, r1
 800023c:	601a      	str	r2, [r3, #0]
	}
	while(!(ADC_CR & ADC_CR_ADEN)){
 800023e:	e008      	b.n	8000252 <adc_cal+0x3a>
		if((get_ticks() - ticks_pre) >= ADC_TIMEOUT){
 8000240:	f001 fa9a 	bl	8001778 <get_ticks>
 8000244:	0002      	movs	r2, r0
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	1ad3      	subs	r3, r2, r3
 800024a:	2bff      	cmp	r3, #255	; 0xff
 800024c:	d901      	bls.n	8000252 <adc_cal+0x3a>
			return ADC_CALI_TIMEOUT;
 800024e:	2302      	movs	r3, #2
 8000250:	e034      	b.n	80002bc <adc_cal+0xa4>
	while(!(ADC_CR & ADC_CR_ADEN)){
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <adc_cal+0xac>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2201      	movs	r2, #1
 8000258:	4013      	ands	r3, r2
 800025a:	d0f1      	beq.n	8000240 <adc_cal+0x28>
		}
	}
	ADC_CR |= ADC_CR_ADCAL;
 800025c:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <adc_cal+0xac>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <adc_cal+0xac>)
 8000262:	2180      	movs	r1, #128	; 0x80
 8000264:	0609      	lsls	r1, r1, #24
 8000266:	430a      	orrs	r2, r1
 8000268:	601a      	str	r2, [r3, #0]
	while((ADC_CR & ADC_CR_ADCAL) == ADC_CR_ADCAL){
 800026a:	e008      	b.n	800027e <adc_cal+0x66>
		if((get_ticks() - ticks_pre) >= ADC_TIMEOUT){
 800026c:	f001 fa84 	bl	8001778 <get_ticks>
 8000270:	0002      	movs	r2, r0
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	1ad3      	subs	r3, r2, r3
 8000276:	2bff      	cmp	r3, #255	; 0xff
 8000278:	d901      	bls.n	800027e <adc_cal+0x66>
			return ADC_CALI_TIMEOUT;
 800027a:	2302      	movs	r3, #2
 800027c:	e01e      	b.n	80002bc <adc_cal+0xa4>
	while((ADC_CR & ADC_CR_ADCAL) == ADC_CR_ADCAL){
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <adc_cal+0xac>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	0fdb      	lsrs	r3, r3, #31
 8000284:	07da      	lsls	r2, r3, #31
 8000286:	2380      	movs	r3, #128	; 0x80
 8000288:	061b      	lsls	r3, r3, #24
 800028a:	429a      	cmp	r2, r3
 800028c:	d0ee      	beq.n	800026c <adc_cal+0x54>
		}
	}
	ADC_CR |= ADC_CR_ADEN;
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <adc_cal+0xac>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <adc_cal+0xac>)
 8000294:	2101      	movs	r1, #1
 8000296:	430a      	orrs	r2, r1
 8000298:	601a      	str	r2, [r3, #0]
	while((ADC_ISR & ADC_ISR_ADRDY) == ADC_ISR_ADRDY){
 800029a:	e008      	b.n	80002ae <adc_cal+0x96>
		if((get_ticks() - ticks_pre) >= ADC_TIMEOUT){
 800029c:	f001 fa6c 	bl	8001778 <get_ticks>
 80002a0:	0002      	movs	r2, r0
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	1ad3      	subs	r3, r2, r3
 80002a6:	2bff      	cmp	r3, #255	; 0xff
 80002a8:	d901      	bls.n	80002ae <adc_cal+0x96>
			return ADC_CALI_TIMEOUT;
 80002aa:	2302      	movs	r3, #2
 80002ac:	e006      	b.n	80002bc <adc_cal+0xa4>
	while((ADC_ISR & ADC_ISR_ADRDY) == ADC_ISR_ADRDY){
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <adc_cal+0xb0>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2201      	movs	r2, #1
 80002b4:	4013      	ands	r3, r2
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d0f0      	beq.n	800029c <adc_cal+0x84>
		}
	}

	return SYSTEM_OK;
 80002ba:	2300      	movs	r3, #0
}
 80002bc:	0018      	movs	r0, r3
 80002be:	46bd      	mov	sp, r7
 80002c0:	b002      	add	sp, #8
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40012408 	.word	0x40012408
 80002c8:	40012400 	.word	0x40012400

080002cc <adc_read>:


system_err_t adc_read(uint16_t *pData){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	uint32_t ticks_pre = get_ticks();
 80002d4:	f001 fa50 	bl	8001778 <get_ticks>
 80002d8:	0003      	movs	r3, r0
 80002da:	60fb      	str	r3, [r7, #12]
	ADC_CR |= ADC_CR_ADSTART;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <adc_read+0x50>)
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <adc_read+0x50>)
 80002e2:	2104      	movs	r1, #4
 80002e4:	430a      	orrs	r2, r1
 80002e6:	601a      	str	r2, [r3, #0]
	while(!(ADC_ISR & ADC_ISR_EOC)){
 80002e8:	e008      	b.n	80002fc <adc_read+0x30>
		if((get_ticks() - ticks_pre) >= ADC_TIMEOUT){
 80002ea:	f001 fa45 	bl	8001778 <get_ticks>
 80002ee:	0002      	movs	r2, r0
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	1ad3      	subs	r3, r2, r3
 80002f4:	2bff      	cmp	r3, #255	; 0xff
 80002f6:	d901      	bls.n	80002fc <adc_read+0x30>
			return ADC_READ_TIMEOUT;
 80002f8:	2303      	movs	r3, #3
 80002fa:	e00a      	b.n	8000312 <adc_read+0x46>
	while(!(ADC_ISR & ADC_ISR_EOC)){
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <adc_read+0x54>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2204      	movs	r2, #4
 8000302:	4013      	ands	r3, r2
 8000304:	d0f1      	beq.n	80002ea <adc_read+0x1e>
		}
	}
	*pData = (uint16_t)ADC_DR;
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <adc_read+0x58>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	b29a      	uxth	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	801a      	strh	r2, [r3, #0]
	//ADC_CR &= ~ADC_CR_ADSTART;
	return SYSTEM_OK;
 8000310:	2300      	movs	r3, #0
}
 8000312:	0018      	movs	r0, r3
 8000314:	46bd      	mov	sp, r7
 8000316:	b004      	add	sp, #16
 8000318:	bd80      	pop	{r7, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	40012408 	.word	0x40012408
 8000320:	40012400 	.word	0x40012400
 8000324:	40012440 	.word	0x40012440

08000328 <fifo_init>:

#include <fifo.h>



void fifo_init(fifo_t *pFifo, uint8_t *pBuffer, uint16_t size) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	1dbb      	adds	r3, r7, #6
 8000334:	801a      	strh	r2, [r3, #0]
	pFifo->pBuffer = pBuffer;
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	68ba      	ldr	r2, [r7, #8]
 800033a:	601a      	str	r2, [r3, #0]
	pFifo->size    = size;
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	1dba      	adds	r2, r7, #6
 8000340:	8812      	ldrh	r2, [r2, #0]
 8000342:	809a      	strh	r2, [r3, #4]
	pFifo->rd_ptr  = 0;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	2200      	movs	r2, #0
 8000348:	811a      	strh	r2, [r3, #8]
	pFifo->wr_ptr  = 0;
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	2200      	movs	r2, #0
 800034e:	80da      	strh	r2, [r3, #6]
	pFifo->state   = FIFO_EMPTY;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	2202      	movs	r2, #2
 8000354:	729a      	strb	r2, [r3, #10]
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b004      	add	sp, #16
 800035c:	bd80      	pop	{r7, pc}

0800035e <fifo_write>:

void fifo_write(fifo_t *pFifo, uint8_t data) {
 800035e:	b580      	push	{r7, lr}
 8000360:	b084      	sub	sp, #16
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	000a      	movs	r2, r1
 8000368:	1cfb      	adds	r3, r7, #3
 800036a:	701a      	strb	r2, [r3, #0]
	uint16_t wr_ptr = pFifo->wr_ptr;
 800036c:	210e      	movs	r1, #14
 800036e:	187b      	adds	r3, r7, r1
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	88d2      	ldrh	r2, [r2, #6]
 8000374:	801a      	strh	r2, [r3, #0]
	if (pFifo->state != FIFO_FULL) {
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	7a9b      	ldrb	r3, [r3, #10]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d00c      	beq.n	8000398 <fifo_write+0x3a>
		pFifo->pBuffer[wr_ptr] = data;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	187b      	adds	r3, r7, r1
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	18d3      	adds	r3, r2, r3
 8000388:	1cfa      	adds	r2, r7, #3
 800038a:	7812      	ldrb	r2, [r2, #0]
 800038c:	701a      	strb	r2, [r3, #0]
		wr_ptr++;
 800038e:	187b      	adds	r3, r7, r1
 8000390:	881a      	ldrh	r2, [r3, #0]
 8000392:	187b      	adds	r3, r7, r1
 8000394:	3201      	adds	r2, #1
 8000396:	801a      	strh	r2, [r3, #0]
	}

	if (wr_ptr >= pFifo->size) {
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	889b      	ldrh	r3, [r3, #4]
 800039c:	210e      	movs	r1, #14
 800039e:	187a      	adds	r2, r7, r1
 80003a0:	8812      	ldrh	r2, [r2, #0]
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d302      	bcc.n	80003ac <fifo_write+0x4e>
		wr_ptr = 0;
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2200      	movs	r2, #0
 80003aa:	801a      	strh	r2, [r3, #0]
	}

	pFifo->wr_ptr = wr_ptr;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	210e      	movs	r1, #14
 80003b0:	187a      	adds	r2, r7, r1
 80003b2:	8812      	ldrh	r2, [r2, #0]
 80003b4:	80da      	strh	r2, [r3, #6]

	if ((wr_ptr + 1) == pFifo->rd_ptr) {
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	881b      	ldrh	r3, [r3, #0]
 80003ba:	3301      	adds	r3, #1
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	8912      	ldrh	r2, [r2, #8]
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d103      	bne.n	80003cc <fifo_write+0x6e>
		pFifo->state = FIFO_FULL;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2201      	movs	r2, #1
 80003c8:	729a      	strb	r2, [r3, #10]
	} else {
		pFifo->state = FIFO_OK;
	}
}
 80003ca:	e002      	b.n	80003d2 <fifo_write+0x74>
		pFifo->state = FIFO_OK;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2200      	movs	r2, #0
 80003d0:	729a      	strb	r2, [r3, #10]
}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b004      	add	sp, #16
 80003d8:	bd80      	pop	{r7, pc}

080003da <fifo_read>:

uint8_t fifo_read(fifo_t *pFifo) {
 80003da:	b580      	push	{r7, lr}
 80003dc:	b084      	sub	sp, #16
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
	uint16_t rd_ptr = pFifo->rd_ptr;
 80003e2:	210e      	movs	r1, #14
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	8912      	ldrh	r2, [r2, #8]
 80003ea:	801a      	strh	r2, [r3, #0]
	uint8_t data;
	if (pFifo->state != FIFO_EMPTY) {
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	7a9b      	ldrb	r3, [r3, #10]
 80003f0:	2b02      	cmp	r3, #2
 80003f2:	d00d      	beq.n	8000410 <fifo_read+0x36>
		data = pFifo->pBuffer[rd_ptr];
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	18d2      	adds	r2, r2, r3
 80003fe:	230d      	movs	r3, #13
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	7812      	ldrb	r2, [r2, #0]
 8000404:	701a      	strb	r2, [r3, #0]
		rd_ptr++;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	881a      	ldrh	r2, [r3, #0]
 800040a:	187b      	adds	r3, r7, r1
 800040c:	3201      	adds	r2, #1
 800040e:	801a      	strh	r2, [r3, #0]
	}

	if (rd_ptr >= pFifo->size) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	889b      	ldrh	r3, [r3, #4]
 8000414:	210e      	movs	r1, #14
 8000416:	187a      	adds	r2, r7, r1
 8000418:	8812      	ldrh	r2, [r2, #0]
 800041a:	429a      	cmp	r2, r3
 800041c:	d302      	bcc.n	8000424 <fifo_read+0x4a>
		rd_ptr = 0;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2200      	movs	r2, #0
 8000422:	801a      	strh	r2, [r3, #0]
	}

	pFifo->rd_ptr = rd_ptr;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	210e      	movs	r1, #14
 8000428:	187a      	adds	r2, r7, r1
 800042a:	8812      	ldrh	r2, [r2, #0]
 800042c:	811a      	strh	r2, [r3, #8]

	if (rd_ptr == pFifo->wr_ptr) {
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	88db      	ldrh	r3, [r3, #6]
 8000432:	187a      	adds	r2, r7, r1
 8000434:	8812      	ldrh	r2, [r2, #0]
 8000436:	429a      	cmp	r2, r3
 8000438:	d103      	bne.n	8000442 <fifo_read+0x68>
		pFifo->state = FIFO_EMPTY;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2202      	movs	r2, #2
 800043e:	729a      	strb	r2, [r3, #10]
 8000440:	e002      	b.n	8000448 <fifo_read+0x6e>
	} else {
		pFifo->state = FIFO_OK;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2200      	movs	r2, #0
 8000446:	729a      	strb	r2, [r3, #10]
	}

	return data;
 8000448:	230d      	movs	r3, #13
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	781b      	ldrb	r3, [r3, #0]
}
 800044e:	0018      	movs	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	b004      	add	sp, #16
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <gpiox_reset>:
gpio_reg_t *GPIOC = (gpio_reg_t *) GPIOC_BASE;
gpio_reg_t *GPIOD = (gpio_reg_t *) GPIOD_BASE;
gpio_reg_t *GPIOH = (gpio_reg_t *) GPIOH_BASE;


void gpiox_reset(){
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
	// reset all gpio register bank
	GPIOA->MODER = 0;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <gpiox_reset+0x34>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
	uint32_t temp = (IOPx_IOPAx | IOPx_IOPBx | IOPx_IOPCx | IOPx_IOPDx | IOPx_IOPHx);
 8000466:	238f      	movs	r3, #143	; 0x8f
 8000468:	607b      	str	r3, [r7, #4]
	RCC_IOPRSTR |= temp;
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <gpiox_reset+0x38>)
 800046c:	6819      	ldr	r1, [r3, #0]
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <gpiox_reset+0x38>)
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	430a      	orrs	r2, r1
 8000474:	601a      	str	r2, [r3, #0]
	RCC_IOPRSTR &= ~temp;
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <gpiox_reset+0x38>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	43d9      	mvns	r1, r3
 800047e:	4b04      	ldr	r3, [pc, #16]	; (8000490 <gpiox_reset+0x38>)
 8000480:	400a      	ands	r2, r1
 8000482:	601a      	str	r2, [r3, #0]
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b002      	add	sp, #8
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000000 	.word	0x20000000
 8000490:	4002101c 	.word	0x4002101c

08000494 <gpio_config>:

void gpio_config(gpio_reg_t *pPort, gpio_config_t *pConfig){
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
	uint32_t pinNum = (pConfig->pin & 0x0F);
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	001a      	movs	r2, r3
 80004a4:	230f      	movs	r3, #15
 80004a6:	4013      	ands	r3, r2
 80004a8:	60fb      	str	r3, [r7, #12]
	uint32_t shift;

	// Activate Port
	if (pPort == GPIOA){RCC_IOPENR |= IOPx_IOPAx;};
 80004aa:	4b66      	ldr	r3, [pc, #408]	; (8000644 <gpio_config+0x1b0>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d105      	bne.n	80004c0 <gpio_config+0x2c>
 80004b4:	4b64      	ldr	r3, [pc, #400]	; (8000648 <gpio_config+0x1b4>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b63      	ldr	r3, [pc, #396]	; (8000648 <gpio_config+0x1b4>)
 80004ba:	2101      	movs	r1, #1
 80004bc:	430a      	orrs	r2, r1
 80004be:	601a      	str	r2, [r3, #0]
	if (pPort == GPIOB){RCC_IOPENR |= IOPx_IOPBx;};
 80004c0:	4b62      	ldr	r3, [pc, #392]	; (800064c <gpio_config+0x1b8>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d105      	bne.n	80004d6 <gpio_config+0x42>
 80004ca:	4b5f      	ldr	r3, [pc, #380]	; (8000648 <gpio_config+0x1b4>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	4b5e      	ldr	r3, [pc, #376]	; (8000648 <gpio_config+0x1b4>)
 80004d0:	2102      	movs	r1, #2
 80004d2:	430a      	orrs	r2, r1
 80004d4:	601a      	str	r2, [r3, #0]
	if (pPort == GPIOC){RCC_IOPENR |= IOPx_IOPCx;};
 80004d6:	4b5e      	ldr	r3, [pc, #376]	; (8000650 <gpio_config+0x1bc>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d105      	bne.n	80004ec <gpio_config+0x58>
 80004e0:	4b59      	ldr	r3, [pc, #356]	; (8000648 <gpio_config+0x1b4>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b58      	ldr	r3, [pc, #352]	; (8000648 <gpio_config+0x1b4>)
 80004e6:	2104      	movs	r1, #4
 80004e8:	430a      	orrs	r2, r1
 80004ea:	601a      	str	r2, [r3, #0]
	if (pPort == GPIOD){RCC_IOPENR |= IOPx_IOPDx;};
 80004ec:	4b59      	ldr	r3, [pc, #356]	; (8000654 <gpio_config+0x1c0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d105      	bne.n	8000502 <gpio_config+0x6e>
 80004f6:	4b54      	ldr	r3, [pc, #336]	; (8000648 <gpio_config+0x1b4>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	4b53      	ldr	r3, [pc, #332]	; (8000648 <gpio_config+0x1b4>)
 80004fc:	2108      	movs	r1, #8
 80004fe:	430a      	orrs	r2, r1
 8000500:	601a      	str	r2, [r3, #0]
	if (pPort == GPIOH){RCC_IOPENR |= IOPx_IOPHx;};
 8000502:	4b55      	ldr	r3, [pc, #340]	; (8000658 <gpio_config+0x1c4>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	d105      	bne.n	8000518 <gpio_config+0x84>
 800050c:	4b4e      	ldr	r3, [pc, #312]	; (8000648 <gpio_config+0x1b4>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b4d      	ldr	r3, [pc, #308]	; (8000648 <gpio_config+0x1b4>)
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	430a      	orrs	r2, r1
 8000516:	601a      	str	r2, [r3, #0]

	//RCC_IOPSMEN |= IOPx_IOPBx;


	// First Config Registers => Config Bits = PinNum
	shift = pinNum;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	60bb      	str	r3, [r7, #8]
	pPort->OTYPER &= ~(0x01u << shift);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	2101      	movs	r1, #1
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	4091      	lsls	r1, r2
 8000526:	000a      	movs	r2, r1
 8000528:	43d2      	mvns	r2, r2
 800052a:	401a      	ands	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	605a      	str	r2, [r3, #4]
	pPort->OTYPER |= (pConfig->output_mode << shift);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	7912      	ldrb	r2, [r2, #4]
 8000538:	0011      	movs	r1, r2
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	4091      	lsls	r1, r2
 800053e:	000a      	movs	r2, r1
 8000540:	431a      	orrs	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	605a      	str	r2, [r3, #4]
	// Second Config Registers => Config Bits = pinNum * 2
	shift = (shift << 1);
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	60bb      	str	r3, [r7, #8]
	pPort->MODER &= ~(0x03 << shift);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2103      	movs	r1, #3
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	4091      	lsls	r1, r2
 8000556:	000a      	movs	r2, r1
 8000558:	43d2      	mvns	r2, r2
 800055a:	401a      	ands	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	601a      	str	r2, [r3, #0]
	pPort->MODER |= ((pConfig->func_mode & 0x03) << shift);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	7852      	ldrb	r2, [r2, #1]
 8000568:	0011      	movs	r1, r2
 800056a:	2203      	movs	r2, #3
 800056c:	4011      	ands	r1, r2
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	4091      	lsls	r1, r2
 8000572:	000a      	movs	r2, r1
 8000574:	431a      	orrs	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	601a      	str	r2, [r3, #0]
	pPort->OSPEEDR &= ~(0x03 << shift);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	2103      	movs	r1, #3
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	4091      	lsls	r1, r2
 8000584:	000a      	movs	r2, r1
 8000586:	43d2      	mvns	r2, r2
 8000588:	401a      	ands	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	609a      	str	r2, [r3, #8]
	pPort->OSPEEDR |= (pConfig->speed_mode << shift);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	683a      	ldr	r2, [r7, #0]
 8000594:	78d2      	ldrb	r2, [r2, #3]
 8000596:	0011      	movs	r1, r2
 8000598:	68ba      	ldr	r2, [r7, #8]
 800059a:	4091      	lsls	r1, r2
 800059c:	000a      	movs	r2, r1
 800059e:	431a      	orrs	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	609a      	str	r2, [r3, #8]
	pPort->PUPDR &= ~(0x03 << shift);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	2103      	movs	r1, #3
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	4091      	lsls	r1, r2
 80005ae:	000a      	movs	r2, r1
 80005b0:	43d2      	mvns	r2, r2
 80005b2:	401a      	ands	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	60da      	str	r2, [r3, #12]
	pPort->PUPDR |= (pConfig->pull_mode << shift);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	7892      	ldrb	r2, [r2, #2]
 80005c0:	0011      	movs	r1, r2
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	4091      	lsls	r1, r2
 80005c6:	000a      	movs	r2, r1
 80005c8:	431a      	orrs	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60da      	str	r2, [r3, #12]

	// Alternate Config Registers => Config Bits = (pinNum * 4) in Range 0..28
	shift = (shift << 1) & 0x1c; // maximum 28
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	221c      	movs	r2, #28
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
	if (pinNum > 0x07){  // Pin Num > 7
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	d917      	bls.n	800060e <gpio_config+0x17a>
		pPort->AFRH &= ~(0x0f << shift);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e2:	210f      	movs	r1, #15
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	4091      	lsls	r1, r2
 80005e8:	000a      	movs	r2, r1
 80005ea:	43d2      	mvns	r2, r2
 80005ec:	401a      	ands	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
		pPort->AFRH |= ((pConfig->func_mode >> 2) << shift);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	7852      	ldrb	r2, [r2, #1]
 80005fa:	0892      	lsrs	r2, r2, #2
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	0011      	movs	r1, r2
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	4091      	lsls	r1, r2
 8000604:	000a      	movs	r2, r1
 8000606:	431a      	orrs	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	625a      	str	r2, [r3, #36]	; 0x24
	else{
		pPort->AFRL &= ~(0x0f << shift);
		pPort->AFRL |= ((pConfig->func_mode >> 2) << shift);
	};

}
 800060c:	e016      	b.n	800063c <gpio_config+0x1a8>
		pPort->AFRL &= ~(0x0f << shift);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6a1b      	ldr	r3, [r3, #32]
 8000612:	210f      	movs	r1, #15
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	4091      	lsls	r1, r2
 8000618:	000a      	movs	r2, r1
 800061a:	43d2      	mvns	r2, r2
 800061c:	401a      	ands	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	621a      	str	r2, [r3, #32]
		pPort->AFRL |= ((pConfig->func_mode >> 2) << shift);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6a1b      	ldr	r3, [r3, #32]
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	7852      	ldrb	r2, [r2, #1]
 800062a:	0892      	lsrs	r2, r2, #2
 800062c:	b2d2      	uxtb	r2, r2
 800062e:	0011      	movs	r1, r2
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	4091      	lsls	r1, r2
 8000634:	000a      	movs	r2, r1
 8000636:	431a      	orrs	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	621a      	str	r2, [r3, #32]
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b004      	add	sp, #16
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	4002102c 	.word	0x4002102c
 800064c:	20000004 	.word	0x20000004
 8000650:	20000008 	.word	0x20000008
 8000654:	2000000c 	.word	0x2000000c
 8000658:	20000010 	.word	0x20000010

0800065c <gpio_set_val>:


void gpio_set_val(gpio_reg_t *pPort, gpio_pin_t pin, bool_t val){
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	0008      	movs	r0, r1
 8000666:	0011      	movs	r1, r2
 8000668:	1cfb      	adds	r3, r7, #3
 800066a:	1c02      	adds	r2, r0, #0
 800066c:	701a      	strb	r2, [r3, #0]
 800066e:	1cbb      	adds	r3, r7, #2
 8000670:	1c0a      	adds	r2, r1, #0
 8000672:	701a      	strb	r2, [r3, #0]
	uint32_t shift   = pin & 0x0F;
 8000674:	1cfb      	adds	r3, r7, #3
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	220f      	movs	r2, #15
 800067a:	4013      	ands	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]

	pPort->ODR &= ~(0x01 << shift);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	2101      	movs	r1, #1
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	4091      	lsls	r1, r2
 8000688:	000a      	movs	r2, r1
 800068a:	43d2      	mvns	r2, r2
 800068c:	401a      	ands	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	615a      	str	r2, [r3, #20]
	if (val == true){pPort->ODR |= (0x01 << shift);};
 8000692:	1cbb      	adds	r3, r7, #2
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d108      	bne.n	80006ac <gpio_set_val+0x50>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	2101      	movs	r1, #1
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	4091      	lsls	r1, r2
 80006a4:	000a      	movs	r2, r1
 80006a6:	431a      	orrs	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	615a      	str	r2, [r3, #20]
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b004      	add	sp, #16
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <gpio_get_val>:

bool_t gpio_get_val(gpio_reg_t *pPort, gpio_pin_t pin){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	000a      	movs	r2, r1
 80006be:	1cfb      	adds	r3, r7, #3
 80006c0:	701a      	strb	r2, [r3, #0]

	bool_t temp = false;
 80006c2:	200f      	movs	r0, #15
 80006c4:	183b      	adds	r3, r7, r0
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	if (((pPort->IDR & (0x01u << pin)) & 0xFFFF) == (0x01u << pin)) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	691b      	ldr	r3, [r3, #16]
 80006ce:	1cfa      	adds	r2, r7, #3
 80006d0:	7812      	ldrb	r2, [r2, #0]
 80006d2:	2101      	movs	r1, #1
 80006d4:	4091      	lsls	r1, r2
 80006d6:	000a      	movs	r2, r1
 80006d8:	4013      	ands	r3, r2
 80006da:	041b      	lsls	r3, r3, #16
 80006dc:	0c1a      	lsrs	r2, r3, #16
 80006de:	1cfb      	adds	r3, r7, #3
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2101      	movs	r1, #1
 80006e4:	4099      	lsls	r1, r3
 80006e6:	000b      	movs	r3, r1
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d102      	bne.n	80006f2 <gpio_get_val+0x3e>
		temp = true;
 80006ec:	183b      	adds	r3, r7, r0
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
	}
	return temp;
 80006f2:	230f      	movs	r3, #15
 80006f4:	18fb      	adds	r3, r7, r3
 80006f6:	781b      	ldrb	r3, [r3, #0]
}
 80006f8:	0018      	movs	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b004      	add	sp, #16
 80006fe:	bd80      	pop	{r7, pc}

08000700 <read_voltage>:
static volatile bool_t spi_init_done = false;
static volatile bool_t rn4020_is_connect = false;


// scale between Min and Max Value (prefer 0 - 3300 => 0 - 3,3V)
hal_err_t read_voltage(uint16_t *pData){
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b087      	sub	sp, #28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
	uint16_t val  = 0;
 800070c:	230e      	movs	r3, #14
 800070e:	18fb      	adds	r3, r7, r3
 8000710:	2200      	movs	r2, #0
 8000712:	801a      	strh	r2, [r3, #0]
	// polling 64 samples
	for (int j=0; j<8; j++){
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	e015      	b.n	8000746 <read_voltage+0x46>
		if (adc_read(&val) == SYSTEM_OK) {
 800071a:	240e      	movs	r4, #14
 800071c:	193b      	adds	r3, r7, r4
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff fdd4 	bl	80002cc <adc_read>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d106      	bne.n	8000736 <read_voltage+0x36>
			temp += (uint32_t)val;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	001a      	movs	r2, r3
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	189b      	adds	r3, r3, r2
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	e004      	b.n	8000740 <read_voltage+0x40>
		}else {
			*pData = 0;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2200      	movs	r2, #0
 800073a:	801a      	strh	r2, [r3, #0]
			return HAL_DRV_ERROR;
 800073c:	2302      	movs	r3, #2
 800073e:	e010      	b.n	8000762 <read_voltage+0x62>
	for (int j=0; j<8; j++){
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	3301      	adds	r3, #1
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	2b07      	cmp	r3, #7
 800074a:	dde6      	ble.n	800071a <read_voltage+0x1a>
		}
	}
	// average and scale
	temp = (((temp >> 3) * (uint32_t)(3300)) >> 12);
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	08db      	lsrs	r3, r3, #3
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <read_voltage+0x6c>)
 8000752:	4353      	muls	r3, r2
 8000754:	0b1b      	lsrs	r3, r3, #12
 8000756:	617b      	str	r3, [r7, #20]
	*pData = (uint16_t)temp;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	b29a      	uxth	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	801a      	strh	r2, [r3, #0]
	return HAL_OK;
 8000760:	2300      	movs	r3, #0
}
 8000762:	0018      	movs	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	b007      	add	sp, #28
 8000768:	bd90      	pop	{r4, r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	00000ce4 	.word	0x00000ce4

08000770 <mcp4241_init>:
 * 01 = Increment
 * 10 = Decrement
 * 11 = Read Data
 *
 */
hal_err_t mcp4241_init(){
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

	if (spi_init_done == false) {
 8000776:	4b33      	ldr	r3, [pc, #204]	; (8000844 <mcp4241_init+0xd4>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d110      	bne.n	80007a2 <mcp4241_init+0x32>
		spi_config_t spi_cfg;
		spi_cfg.clk_div = SPI_DIV2;
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	705a      	strb	r2, [r3, #1]
		spi_cfg.frame_format = SPI_MSB_FIRST;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	709a      	strb	r2, [r3, #2]
		spi_cfg.mode = SPI_MODE_0;
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
		spi_init(SPI1, &spi_cfg);
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <mcp4241_init+0xd8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	1d3a      	adds	r2, r7, #4
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f000 fe1e 	bl	80013dc <spi_init>
 80007a0:	e003      	b.n	80007aa <mcp4241_init+0x3a>
	} else {
		print("HAL Info: SPI is already installed");
 80007a2:	4b2a      	ldr	r3, [pc, #168]	; (800084c <mcp4241_init+0xdc>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 ff99 	bl	80016dc <print>
	}

	// chip select
	gpio_config_t gpio_cfg;
	gpio_cfg.pin         = GPIO_8;
 80007aa:	2108      	movs	r1, #8
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2208      	movs	r2, #8
 80007b0:	701a      	strb	r2, [r3, #0]
	gpio_cfg.func_mode   = GPIO_FUNC_MODE_OUTPUT;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2201      	movs	r2, #1
 80007b6:	705a      	strb	r2, [r3, #1]
	gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2200      	movs	r2, #0
 80007bc:	711a      	strb	r2, [r3, #4]
	gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	709a      	strb	r2, [r3, #2]
	gpio_cfg.speed_mode  = GPIO_SPEED_MODE_HIGH_SPEED;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2202      	movs	r2, #2
 80007c8:	70da      	strb	r2, [r3, #3]
	gpio_config(GPIOB, &gpio_cfg);
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <mcp4241_init+0xe0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	187a      	adds	r2, r7, r1
 80007d0:	0011      	movs	r1, r2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f7ff fe5e 	bl	8000494 <gpio_config>

	mcp4241_cs_high();
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <mcp4241_init+0xe0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2201      	movs	r2, #1
 80007de:	2108      	movs	r1, #8
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ff3b 	bl	800065c <gpio_set_val>
	wait(100);
 80007e6:	2064      	movs	r0, #100	; 0x64
 80007e8:	f000 ff60 	bl	80016ac <wait>


	uint8_t temp;
	// gain =>
	mcp4241_read(MCP4241_EEPROM_0, &temp); // read the error don't work with eeprom
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	0019      	movs	r1, r3
 80007f0:	2006      	movs	r0, #6
 80007f2:	f000 f8ed 	bl	80009d0 <mcp4241_read>

	if (mcp4241_write(MCP4241_VOLATILE_WIPER_0, temp) != HAL_OK) {
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	0019      	movs	r1, r3
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 f8a5 	bl	800094c <mcp4241_write>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d005      	beq.n	8000812 <mcp4241_init+0xa2>
		print("HAL: Error write gain");
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <mcp4241_init+0xe4>)
 8000808:	0018      	movs	r0, r3
 800080a:	f000 ff67 	bl	80016dc <print>
		return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e013      	b.n	800083a <mcp4241_init+0xca>
	}

	// offset =>
	mcp4241_read(MCP4241_EEPROM_1, &temp); // read the error don't work with eeprom
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	0019      	movs	r1, r3
 8000816:	2007      	movs	r0, #7
 8000818:	f000 f8da 	bl	80009d0 <mcp4241_read>

	if (mcp4241_write(MCP4241_VOLATILE_WIPER_1, temp) != HAL_OK) {
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	0019      	movs	r1, r3
 8000822:	2001      	movs	r0, #1
 8000824:	f000 f892 	bl	800094c <mcp4241_write>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d005      	beq.n	8000838 <mcp4241_init+0xc8>
		print("HAL: Error write offset");
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <mcp4241_init+0xe8>)
 800082e:	0018      	movs	r0, r3
 8000830:	f000 ff54 	bl	80016dc <print>
		return HAL_ERROR;
 8000834:	2301      	movs	r3, #1
 8000836:	e000      	b.n	800083a <mcp4241_init+0xca>
	}

	return HAL_OK;
 8000838:	2300      	movs	r3, #0
}
 800083a:	0018      	movs	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	b004      	add	sp, #16
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	20000044 	.word	0x20000044
 8000848:	20000014 	.word	0x20000014
 800084c:	08001ddc 	.word	0x08001ddc
 8000850:	20000004 	.word	0x20000004
 8000854:	08001e00 	.word	0x08001e00
 8000858:	08001e18 	.word	0x08001e18

0800085c <mcp4241_incr>:


// increment by 8-Bit Command
// [7:4] Adr [3:2] cmd [1:0] data (always zero)

hal_err_t mcp4241_incr(mcp4241_adr_t adr) {
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	0002      	movs	r2, r0
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data[1];
	uint8_t tx_data[1];

	tx_data[0] = ((adr << 4) | MCP4241_CMD_INCR << 2);
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	011b      	lsls	r3, r3, #4
 800086e:	b25b      	sxtb	r3, r3
 8000870:	2204      	movs	r2, #4
 8000872:	4313      	orrs	r3, r2
 8000874:	b25b      	sxtb	r3, r3
 8000876:	b2da      	uxtb	r2, r3
 8000878:	2408      	movs	r4, #8
 800087a:	193b      	adds	r3, r7, r4
 800087c:	701a      	strb	r2, [r3, #0]

	mcp4241_cs_low();
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <mcp4241_incr+0x70>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2200      	movs	r2, #0
 8000884:	2108      	movs	r1, #8
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff fee8 	bl	800065c <gpio_set_val>
	if(spi_transaction(SPI1, tx_data, rx_data, 1) != SYSTEM_OK) {
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <mcp4241_incr+0x74>)
 800088e:	6818      	ldr	r0, [r3, #0]
 8000890:	230c      	movs	r3, #12
 8000892:	18fa      	adds	r2, r7, r3
 8000894:	1939      	adds	r1, r7, r4
 8000896:	2301      	movs	r3, #1
 8000898:	f000 fe78 	bl	800158c <spi_transaction>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <mcp4241_incr+0x48>
		return HAL_DRV_ERROR;
 80008a0:	2302      	movs	r3, #2
 80008a2:	e00e      	b.n	80008c2 <mcp4241_incr+0x66>
	}
	mcp4241_cs_high();
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <mcp4241_incr+0x70>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2201      	movs	r2, #1
 80008aa:	2108      	movs	r1, #8
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff fed5 	bl	800065c <gpio_set_val>

	// Bit 2 is cmd error bit => by error goes to low
	// all other bits have value high
	if (rx_data[0] != 0xFF) {
 80008b2:	230c      	movs	r3, #12
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2bff      	cmp	r3, #255	; 0xff
 80008ba:	d001      	beq.n	80008c0 <mcp4241_incr+0x64>
		return HAL_MCP4241_ADR_ERROR;
 80008bc:	230a      	movs	r3, #10
 80008be:	e000      	b.n	80008c2 <mcp4241_incr+0x66>
	}
	return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b005      	add	sp, #20
 80008c8:	bd90      	pop	{r4, r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	20000004 	.word	0x20000004
 80008d0:	20000014 	.word	0x20000014

080008d4 <mcp4241_decr>:

// decrement by 8-Bit Command
// [7:4] Adr [3:2] cmd [1:0] data (always zero)
hal_err_t mcp4241_decr(mcp4241_adr_t adr) {
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	0002      	movs	r2, r0
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data[1];
	uint8_t tx_data[1];

	tx_data[0] = ((adr << 4) | MCP4241_CMD_DECR << 2);
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	2208      	movs	r2, #8
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b25b      	sxtb	r3, r3
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	2408      	movs	r4, #8
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	701a      	strb	r2, [r3, #0]

	mcp4241_cs_low();
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <mcp4241_decr+0x70>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2200      	movs	r2, #0
 80008fc:	2108      	movs	r1, #8
 80008fe:	0018      	movs	r0, r3
 8000900:	f7ff feac 	bl	800065c <gpio_set_val>
	if(spi_transaction(SPI1, tx_data, rx_data, 1) != SYSTEM_OK) {
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <mcp4241_decr+0x74>)
 8000906:	6818      	ldr	r0, [r3, #0]
 8000908:	230c      	movs	r3, #12
 800090a:	18fa      	adds	r2, r7, r3
 800090c:	1939      	adds	r1, r7, r4
 800090e:	2301      	movs	r3, #1
 8000910:	f000 fe3c 	bl	800158c <spi_transaction>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <mcp4241_decr+0x48>
		return HAL_DRV_ERROR;
 8000918:	2302      	movs	r3, #2
 800091a:	e00e      	b.n	800093a <mcp4241_decr+0x66>
	}
	mcp4241_cs_high();
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <mcp4241_decr+0x70>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2201      	movs	r2, #1
 8000922:	2108      	movs	r1, #8
 8000924:	0018      	movs	r0, r3
 8000926:	f7ff fe99 	bl	800065c <gpio_set_val>

	// Bit 2 is cmd error bit => by error goes to low
	// all other bits have value high
	if (rx_data[0] != 0xFF) {
 800092a:	230c      	movs	r3, #12
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2bff      	cmp	r3, #255	; 0xff
 8000932:	d001      	beq.n	8000938 <mcp4241_decr+0x64>
		return HAL_MCP4241_ADR_ERROR;
 8000934:	230a      	movs	r3, #10
 8000936:	e000      	b.n	800093a <mcp4241_decr+0x66>
	}
	return HAL_OK;
 8000938:	2300      	movs	r3, #0
}
 800093a:	0018      	movs	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	b005      	add	sp, #20
 8000940:	bd90      	pop	{r4, r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	20000004 	.word	0x20000004
 8000948:	20000014 	.word	0x20000014

0800094c <mcp4241_write>:

// write by 16-Bit Command
// [15:12] Adr [11:10] cmd [9:0] data (i'm use only 7 bit of transfer data)
hal_err_t mcp4241_write(mcp4241_adr_t adr, uint8_t val) {
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	0002      	movs	r2, r0
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	701a      	strb	r2, [r3, #0]
 8000958:	1dbb      	adds	r3, r7, #6
 800095a:	1c0a      	adds	r2, r1, #0
 800095c:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data[2];
	uint8_t tx_data[2];

	tx_data[0] = ((adr << 4) | MCP4241_CMD_WRITE << 2);
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	011b      	lsls	r3, r3, #4
 8000964:	b2da      	uxtb	r2, r3
 8000966:	2408      	movs	r4, #8
 8000968:	193b      	adds	r3, r7, r4
 800096a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = val;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	1dba      	adds	r2, r7, #6
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	705a      	strb	r2, [r3, #1]

	mcp4241_cs_low();
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <mcp4241_write+0x7c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2200      	movs	r2, #0
 800097a:	2108      	movs	r1, #8
 800097c:	0018      	movs	r0, r3
 800097e:	f7ff fe6d 	bl	800065c <gpio_set_val>
	if(spi_transaction(SPI1,tx_data,rx_data, 2) != SYSTEM_OK) {
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <mcp4241_write+0x80>)
 8000984:	6818      	ldr	r0, [r3, #0]
 8000986:	230c      	movs	r3, #12
 8000988:	18fa      	adds	r2, r7, r3
 800098a:	1939      	adds	r1, r7, r4
 800098c:	2302      	movs	r3, #2
 800098e:	f000 fdfd 	bl	800158c <spi_transaction>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <mcp4241_write+0x4e>
		return HAL_DRV_ERROR;
 8000996:	2302      	movs	r3, #2
 8000998:	e012      	b.n	80009c0 <mcp4241_write+0x74>
	}
	mcp4241_cs_high();
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <mcp4241_write+0x7c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2201      	movs	r2, #1
 80009a0:	2108      	movs	r1, #8
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff fe5a 	bl	800065c <gpio_set_val>

	// Bit 9 is cmd error bit => by error goes to low
	// all other bits have value high
	if ((rx_data[0] & rx_data[1]) != 0xFF) {
 80009a8:	220c      	movs	r2, #12
 80009aa:	18bb      	adds	r3, r7, r2
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	18ba      	adds	r2, r7, r2
 80009b0:	7852      	ldrb	r2, [r2, #1]
 80009b2:	4013      	ands	r3, r2
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d001      	beq.n	80009be <mcp4241_write+0x72>
		return HAL_MCP4241_ADR_ERROR;
 80009ba:	230a      	movs	r3, #10
 80009bc:	e000      	b.n	80009c0 <mcp4241_write+0x74>
	}

	return HAL_OK;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b005      	add	sp, #20
 80009c6:	bd90      	pop	{r4, r7, pc}
 80009c8:	20000004 	.word	0x20000004
 80009cc:	20000014 	.word	0x20000014

080009d0 <mcp4241_read>:


// read by 16-Bit Command
// [15:12] Adr [11:10] cmd [9:0] data (i'm use only 7 bit of received data)
hal_err_t mcp4241_read(mcp4241_adr_t adr, uint8_t *pVal) {
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	0002      	movs	r2, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data[2];
	uint8_t tx_data[2];

	tx_data[0] = ((adr << 4) | MCP4241_CMD_READ << 2);
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	011b      	lsls	r3, r3, #4
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	220c      	movs	r2, #12
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	2408      	movs	r4, #8
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	701a      	strb	r2, [r3, #0]

	mcp4241_cs_low();
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <mcp4241_read+0x80>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2200      	movs	r2, #0
 80009fa:	2108      	movs	r1, #8
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff fe2d 	bl	800065c <gpio_set_val>
	if(spi_transaction(SPI1,tx_data,rx_data, 2) != SYSTEM_OK) {
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <mcp4241_read+0x84>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	230c      	movs	r3, #12
 8000a08:	18fa      	adds	r2, r7, r3
 8000a0a:	1939      	adds	r1, r7, r4
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	f000 fdbd 	bl	800158c <spi_transaction>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <mcp4241_read+0x4a>
		return HAL_DRV_ERROR;
 8000a16:	2302      	movs	r3, #2
 8000a18:	e016      	b.n	8000a48 <mcp4241_read+0x78>
	}
	mcp4241_cs_high();
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <mcp4241_read+0x80>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2108      	movs	r1, #8
 8000a22:	0018      	movs	r0, r3
 8000a24:	f7ff fe1a 	bl	800065c <gpio_set_val>

	// Bit 9 is cmd error bit => by error goes to low
	// all other bits have value high
	if (rx_data[0] != 0xFE) {
 8000a28:	230c      	movs	r3, #12
 8000a2a:	18fb      	adds	r3, r7, r3
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2bfe      	cmp	r3, #254	; 0xfe
 8000a30:	d004      	beq.n	8000a3c <mcp4241_read+0x6c>
		*pVal = 0x00;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
		return HAL_MCP4241_ADR_ERROR;
 8000a38:	230a      	movs	r3, #10
 8000a3a:	e005      	b.n	8000a48 <mcp4241_read+0x78>
	}

	*pVal = rx_data[1];
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	785a      	ldrb	r2, [r3, #1]
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b005      	add	sp, #20
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	20000004 	.word	0x20000004
 8000a54:	20000014 	.word	0x20000014

08000a58 <rn4020_init>:

	usart_send(USART1, TxBuf, i);
}


hal_err_t rn4020_init(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0

	usart_config_t usart_cfg;
	usart_cfg.clk_div      = 139; // (16000000 / 115200)
 8000a5e:	2108      	movs	r1, #8
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	228b      	movs	r2, #139	; 0x8b
 8000a64:	601a      	str	r2, [r3, #0]
	usart_cfg.format       = USART_LSB_FIRST;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
	usart_cfg.mode         = USART_MODE_TX;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2208      	movs	r2, #8
 8000a70:	711a      	strb	r2, [r3, #4]
	usart_cfg.parity       = USART_NO_PARITY;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	819a      	strh	r2, [r3, #12]
	usart_cfg.word_len     = USART_WORD_LEN_8BIT;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
	usart_cfg.stp_bit      = USART_STOP_1BIT;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2200      	movs	r2, #0
 8000a82:	81da      	strh	r2, [r3, #14]
	usart_cfg.flow_control = USART_HW_FLOW_CONTROL_DISABLE;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	829a      	strh	r2, [r3, #20]
	usart_cfg.interrupt    = USART_INTERRUPT_DISABLE;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	82da      	strh	r2, [r3, #22]
	usart_init(USART1, &usart_cfg);
 8000a90:	4b9e      	ldr	r3, [pc, #632]	; (8000d0c <rn4020_init+0x2b4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	187a      	adds	r2, r7, r1
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 ff99 	bl	80019d0 <usart_init>

	// cmd mode
	gpio_config_t gpio_cfg;
	gpio_cfg.pin         = GPIO_4;
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	701a      	strb	r2, [r3, #0]
	gpio_cfg.func_mode   = GPIO_FUNC_MODE_OUTPUT;
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	705a      	strb	r2, [r3, #1]
	gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	711a      	strb	r2, [r3, #4]
	gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	709a      	strb	r2, [r3, #2]
	gpio_cfg.speed_mode  = GPIO_SPEED_MODE_LOW_SPEED;
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	70da      	strb	r2, [r3, #3]
	gpio_config(GPIOB, &gpio_cfg);
 8000abc:	4b94      	ldr	r3, [pc, #592]	; (8000d10 <rn4020_init+0x2b8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	003a      	movs	r2, r7
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff fce5 	bl	8000494 <gpio_config>

	// wake_sw
	gpio_cfg.pin         = GPIO_5;
 8000aca:	003b      	movs	r3, r7
 8000acc:	2205      	movs	r2, #5
 8000ace:	701a      	strb	r2, [r3, #0]
	gpio_cfg.func_mode   = GPIO_FUNC_MODE_OUTPUT;
 8000ad0:	003b      	movs	r3, r7
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	705a      	strb	r2, [r3, #1]
	gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8000ad6:	003b      	movs	r3, r7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	711a      	strb	r2, [r3, #4]
	gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 8000adc:	003b      	movs	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	709a      	strb	r2, [r3, #2]
	gpio_cfg.speed_mode  = GPIO_SPEED_MODE_LOW_SPEED;
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	70da      	strb	r2, [r3, #3]
	gpio_config(GPIOB, &gpio_cfg);
 8000ae8:	4b89      	ldr	r3, [pc, #548]	; (8000d10 <rn4020_init+0x2b8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	003a      	movs	r2, r7
 8000aee:	0011      	movs	r1, r2
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff fccf 	bl	8000494 <gpio_config>

	// wake_hw
	gpio_cfg.pin         = GPIO_6;
 8000af6:	003b      	movs	r3, r7
 8000af8:	2206      	movs	r2, #6
 8000afa:	701a      	strb	r2, [r3, #0]
	gpio_cfg.func_mode   = GPIO_FUNC_MODE_OUTPUT;
 8000afc:	003b      	movs	r3, r7
 8000afe:	2201      	movs	r2, #1
 8000b00:	705a      	strb	r2, [r3, #1]
	gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8000b02:	003b      	movs	r3, r7
 8000b04:	2200      	movs	r2, #0
 8000b06:	711a      	strb	r2, [r3, #4]
	gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 8000b08:	003b      	movs	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	709a      	strb	r2, [r3, #2]
	gpio_cfg.speed_mode  = GPIO_SPEED_MODE_LOW_SPEED;
 8000b0e:	003b      	movs	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	70da      	strb	r2, [r3, #3]
	gpio_config(GPIOB, &gpio_cfg);
 8000b14:	4b7e      	ldr	r3, [pc, #504]	; (8000d10 <rn4020_init+0x2b8>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	003a      	movs	r2, r7
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fcb9 	bl	8000494 <gpio_config>

	// state connect
	gpio_cfg.pin         = GPIO_9;
 8000b22:	003b      	movs	r3, r7
 8000b24:	2209      	movs	r2, #9
 8000b26:	701a      	strb	r2, [r3, #0]
	gpio_cfg.func_mode   = GPIO_FUNC_MODE_INPUT;
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	705a      	strb	r2, [r3, #1]
	gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2200      	movs	r2, #0
 8000b32:	711a      	strb	r2, [r3, #4]
	gpio_cfg.pull_mode   = GPIO_PULL_MODE_PULL_UP;
 8000b34:	003b      	movs	r3, r7
 8000b36:	2201      	movs	r2, #1
 8000b38:	709a      	strb	r2, [r3, #2]
	gpio_cfg.speed_mode  = GPIO_SPEED_MODE_LOW_SPEED;
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	70da      	strb	r2, [r3, #3]
	gpio_config(GPIOB, &gpio_cfg);
 8000b40:	4b73      	ldr	r3, [pc, #460]	; (8000d10 <rn4020_init+0x2b8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	003a      	movs	r2, r7
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff fca3 	bl	8000494 <gpio_config>

	// cs
	gpio_cfg.pin         = GPIO_10;
 8000b4e:	003b      	movs	r3, r7
 8000b50:	220a      	movs	r2, #10
 8000b52:	701a      	strb	r2, [r3, #0]
	gpio_cfg.func_mode   = GPIO_FUNC_MODE_INPUT;
 8000b54:	003b      	movs	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	705a      	strb	r2, [r3, #1]
	gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	711a      	strb	r2, [r3, #4]
	gpio_cfg.pull_mode   = GPIO_PULL_MODE_PULL_UP;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2201      	movs	r2, #1
 8000b64:	709a      	strb	r2, [r3, #2]
	gpio_cfg.speed_mode  = GPIO_SPEED_MODE_LOW_SPEED;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	70da      	strb	r2, [r3, #3]
	gpio_config(GPIOB, &gpio_cfg);
 8000b6c:	4b68      	ldr	r3, [pc, #416]	; (8000d10 <rn4020_init+0x2b8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	003a      	movs	r2, r7
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff fc8d 	bl	8000494 <gpio_config>

	// mosi
	gpio_cfg.pin         = GPIO_11;
 8000b7a:	003b      	movs	r3, r7
 8000b7c:	220b      	movs	r2, #11
 8000b7e:	701a      	strb	r2, [r3, #0]
	gpio_cfg.func_mode   = GPIO_FUNC_MODE_INPUT;
 8000b80:	003b      	movs	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	705a      	strb	r2, [r3, #1]
	gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8000b86:	003b      	movs	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	711a      	strb	r2, [r3, #4]
	gpio_cfg.pull_mode   = GPIO_PULL_MODE_PULL_UP;
 8000b8c:	003b      	movs	r3, r7
 8000b8e:	2201      	movs	r2, #1
 8000b90:	709a      	strb	r2, [r3, #2]
	gpio_cfg.speed_mode  = GPIO_SPEED_MODE_LOW_SPEED;
 8000b92:	003b      	movs	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	70da      	strb	r2, [r3, #3]
	gpio_config(GPIOB, &gpio_cfg);
 8000b98:	4b5d      	ldr	r3, [pc, #372]	; (8000d10 <rn4020_init+0x2b8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	003a      	movs	r2, r7
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff fc77 	bl	8000494 <gpio_config>



	rn4020_wake_sw_1();
 8000ba6:	4b5a      	ldr	r3, [pc, #360]	; (8000d10 <rn4020_init+0x2b8>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2201      	movs	r2, #1
 8000bac:	2105      	movs	r1, #5
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fd54 	bl	800065c <gpio_set_val>
	rn4020_wake_hw_1();
 8000bb4:	4b56      	ldr	r3, [pc, #344]	; (8000d10 <rn4020_init+0x2b8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2106      	movs	r1, #6
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff fd4d 	bl	800065c <gpio_set_val>

	rn4020_cmd_mode();
 8000bc2:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <rn4020_init+0x2b8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2104      	movs	r1, #4
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff fd46 	bl	800065c <gpio_set_val>
	//rn4020_mldp_mode();

	// factory reset
	if (usart_send_string(USART1, "SF,1\r\n") != SYSTEM_OK) {
 8000bd0:	4b4e      	ldr	r3, [pc, #312]	; (8000d0c <rn4020_init+0x2b4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a4f      	ldr	r2, [pc, #316]	; (8000d14 <rn4020_init+0x2bc>)
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f001 f83b 	bl	8001c54 <usart_send_string>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d005      	beq.n	8000bee <rn4020_init+0x196>
		print("HAL: Error Data Transfer to BluetoothLE module");
 8000be2:	4b4d      	ldr	r3, [pc, #308]	; (8000d18 <rn4020_init+0x2c0>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 fd79 	bl	80016dc <print>
		return HAL_DRV_ERROR;
 8000bea:	2302      	movs	r3, #2
 8000bec:	e08a      	b.n	8000d04 <rn4020_init+0x2ac>
	}

	wait(500);
 8000bee:	23fa      	movs	r3, #250	; 0xfa
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 fd5a 	bl	80016ac <wait>

	if (usart_send_string(USART1, "SS,00000001\r\n") != SYSTEM_OK) {
 8000bf8:	4b44      	ldr	r3, [pc, #272]	; (8000d0c <rn4020_init+0x2b4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a47      	ldr	r2, [pc, #284]	; (8000d1c <rn4020_init+0x2c4>)
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f001 f827 	bl	8001c54 <usart_send_string>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d005      	beq.n	8000c16 <rn4020_init+0x1be>
		print("HAL: Error Data Transfer to BluetoothLE module");
 8000c0a:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <rn4020_init+0x2c0>)
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 fd65 	bl	80016dc <print>
		return HAL_DRV_ERROR;
 8000c12:	2302      	movs	r3, #2
 8000c14:	e076      	b.n	8000d04 <rn4020_init+0x2ac>
	}
	wait(500);
 8000c16:	23fa      	movs	r3, #250	; 0xfa
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 fd46 	bl	80016ac <wait>

	// Auto Advertise    => 0x20000000
	// Enable MLDP       => 0x10000000
	// UART Flow Control => 0x02000000
	// Auto Enter MLDP   => 0x00000800 => not used
	if (usart_send_string(USART1, "SR,32000000\r\n") != SYSTEM_OK) {
 8000c20:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <rn4020_init+0x2b4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a3e      	ldr	r2, [pc, #248]	; (8000d20 <rn4020_init+0x2c8>)
 8000c26:	0011      	movs	r1, r2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f001 f813 	bl	8001c54 <usart_send_string>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d005      	beq.n	8000c3e <rn4020_init+0x1e6>
		print("HAL: Error Data Transfer to BluetoothLE module");
 8000c32:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <rn4020_init+0x2c0>)
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fd51 	bl	80016dc <print>
		return HAL_DRV_ERROR;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	e062      	b.n	8000d04 <rn4020_init+0x2ac>
	}
	wait(500);
 8000c3e:	23fa      	movs	r3, #250	; 0xfa
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fd32 	bl	80016ac <wait>

	if (usart_send_string(USART1, "SN,P4\r\n") != SYSTEM_OK) {
 8000c48:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <rn4020_init+0x2b4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a35      	ldr	r2, [pc, #212]	; (8000d24 <rn4020_init+0x2cc>)
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 ffff 	bl	8001c54 <usart_send_string>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d005      	beq.n	8000c66 <rn4020_init+0x20e>
			print("HAL: Error Data Transfer to BluetoothLE module");
 8000c5a:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <rn4020_init+0x2c0>)
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f000 fd3d 	bl	80016dc <print>
			return HAL_DRV_ERROR;
 8000c62:	2302      	movs	r3, #2
 8000c64:	e04e      	b.n	8000d04 <rn4020_init+0x2ac>
		}
	wait(500);
 8000c66:	23fa      	movs	r3, #250	; 0xfa
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 fd1e 	bl	80016ac <wait>

	// Anpassung Baudrate => 115200
	if (usart_send_string(USART1, "SB,4\r\n") != SYSTEM_OK) {
 8000c70:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <rn4020_init+0x2b4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a2c      	ldr	r2, [pc, #176]	; (8000d28 <rn4020_init+0x2d0>)
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 ffeb 	bl	8001c54 <usart_send_string>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d005      	beq.n	8000c8e <rn4020_init+0x236>
		print("HAL: Error Data Transfer to BluetoothLE module");
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <rn4020_init+0x2c0>)
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 fd29 	bl	80016dc <print>
		return HAL_DRV_ERROR;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	e03a      	b.n	8000d04 <rn4020_init+0x2ac>
	}
	wait(500);
 8000c8e:	23fa      	movs	r3, #250	; 0xfa
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 fd0a 	bl	80016ac <wait>


	// reboot
	if (usart_send_string(USART1, "R,1\r\n") != SYSTEM_OK) {
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <rn4020_init+0x2b4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <rn4020_init+0x2d4>)
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 ffd7 	bl	8001c54 <usart_send_string>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d005      	beq.n	8000cb6 <rn4020_init+0x25e>
		print("HAL: Error Data Transfer to BluetoothLE module");
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <rn4020_init+0x2c0>)
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 fd15 	bl	80016dc <print>
		return HAL_DRV_ERROR;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	e026      	b.n	8000d04 <rn4020_init+0x2ac>
	}
	wait(2000);
 8000cb6:	23fa      	movs	r3, #250	; 0xfa
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 fcf6 	bl	80016ac <wait>


	// ble - mode with flow control


	usart_cfg.clk_div      = 139; // => 16000000 / 115200
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	228b      	movs	r2, #139	; 0x8b
 8000cc6:	601a      	str	r2, [r3, #0]
	usart_cfg.format       = USART_LSB_FIRST;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
	usart_cfg.mode         = USART_MODE_TX_RX;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	711a      	strb	r2, [r3, #4]
	usart_cfg.parity       = USART_NO_PARITY;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	819a      	strh	r2, [r3, #12]
	usart_cfg.word_len     = USART_WORD_LEN_8BIT;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
	usart_cfg.stp_bit      = USART_STOP_1BIT;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	81da      	strh	r2, [r3, #14]
	usart_cfg.flow_control = USART_HW_FLOW_CONTROL_ENABLE;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	22c0      	movs	r2, #192	; 0xc0
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	829a      	strh	r2, [r3, #20]
	usart_cfg.interrupt    = USART_RX_INTERRUPT_ENABLE;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2220      	movs	r2, #32
 8000cf2:	82da      	strh	r2, [r3, #22]
	usart_init(USART1, &usart_cfg);
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <rn4020_init+0x2b4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	187a      	adds	r2, r7, r1
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f000 fe67 	bl	80019d0 <usart_init>


//	rn4020_mldp_mode(); => not used, switch in mldp mode with command ("I")

	return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b008      	add	sp, #32
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000020 	.word	0x20000020
 8000d10:	20000004 	.word	0x20000004
 8000d14:	08001e30 	.word	0x08001e30
 8000d18:	08001e38 	.word	0x08001e38
 8000d1c:	08001e68 	.word	0x08001e68
 8000d20:	08001e78 	.word	0x08001e78
 8000d24:	08001e88 	.word	0x08001e88
 8000d28:	08001e90 	.word	0x08001e90
 8000d2c:	08001e98 	.word	0x08001e98

08000d30 <rn4020_connect>:


void rn4020_connect() {
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
	static bool_t statePre = false;

	bool_t state;

	state = gpio_get_val(GPIOB, GPIO_9);
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <rn4020_connect+0x6c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	1dfc      	adds	r4, r7, #7
 8000d3c:	2109      	movs	r1, #9
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff fcb8 	bl	80006b4 <gpio_get_val>
 8000d44:	0003      	movs	r3, r0
 8000d46:	7023      	strb	r3, [r4, #0]

	if (state == false) {
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <rn4020_connect+0x26>
		rn4020_is_connect = false;
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <rn4020_connect+0x70>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
	}
	// positive flag detect
	if ((state == true) && (statePre == false)) {
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d115      	bne.n	8000d8a <rn4020_connect+0x5a>
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <rn4020_connect+0x74>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d111      	bne.n	8000d8a <rn4020_connect+0x5a>
		wait(100);
 8000d66:	2064      	movs	r0, #100	; 0x64
 8000d68:	f000 fca0 	bl	80016ac <wait>
		usart_send_string(USART1, "I\n");
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <rn4020_connect+0x78>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <rn4020_connect+0x7c>)
 8000d72:	0011      	movs	r1, r2
 8000d74:	0018      	movs	r0, r3
 8000d76:	f000 ff6d 	bl	8001c54 <usart_send_string>
		wait(1000);
 8000d7a:	23fa      	movs	r3, #250	; 0xfa
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 fc94 	bl	80016ac <wait>
		rn4020_is_connect = true;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <rn4020_connect+0x70>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
	}

	statePre = state;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <rn4020_connect+0x74>)
 8000d8c:	1dfa      	adds	r2, r7, #7
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	701a      	strb	r2, [r3, #0]
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b003      	add	sp, #12
 8000d98:	bd90      	pop	{r4, r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	20000004 	.word	0x20000004
 8000da0:	20000045 	.word	0x20000045
 8000da4:	20000046 	.word	0x20000046
 8000da8:	20000020 	.word	0x20000020
 8000dac:	08001ea0 	.word	0x08001ea0

08000db0 <rn4020_get_connect_state>:

bool_t rn4020_get_connect_state() {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	return rn4020_is_connect;
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <rn4020_get_connect_state+0x10>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000045 	.word	0x20000045

08000dc4 <lsm6dso32_init>:


hal_err_t lsm6dso32_init() {
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0

	if (spi_init_done == false) {
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <lsm6dso32_init+0xc8>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d110      	bne.n	8000df6 <lsm6dso32_init+0x32>
		spi_config_t spi_cfg;
		spi_cfg.clk_div = SPI_DIV2;
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	705a      	strb	r2, [r3, #1]
		spi_cfg.frame_format = SPI_MSB_FIRST;
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	709a      	strb	r2, [r3, #2]
		spi_cfg.mode = SPI_MODE_0;
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
		spi_init(SPI1, &spi_cfg);
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <lsm6dso32_init+0xcc>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	1d3a      	adds	r2, r7, #4
 8000dec:	0011      	movs	r1, r2
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 faf4 	bl	80013dc <spi_init>
 8000df4:	e003      	b.n	8000dfe <lsm6dso32_init+0x3a>
	} else {
		print("HAL Info: SPI is already installed");
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <lsm6dso32_init+0xd0>)
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f000 fc6f 	bl	80016dc <print>
	}


	// chip select
	gpio_config_t gpio_cfg;
	gpio_cfg.pin         = GPIO_7;
 8000dfe:	2110      	movs	r1, #16
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2207      	movs	r2, #7
 8000e04:	701a      	strb	r2, [r3, #0]
	gpio_cfg.func_mode   = GPIO_FUNC_MODE_OUTPUT;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2201      	movs	r2, #1
 8000e0a:	705a      	strb	r2, [r3, #1]
	gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2200      	movs	r2, #0
 8000e10:	711a      	strb	r2, [r3, #4]
	gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2200      	movs	r2, #0
 8000e16:	709a      	strb	r2, [r3, #2]
	gpio_cfg.speed_mode  = GPIO_SPEED_MODE_HIGH_SPEED;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	70da      	strb	r2, [r3, #3]
	gpio_config(GPIOB, &gpio_cfg);
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <lsm6dso32_init+0xd4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	187a      	adds	r2, r7, r1
 8000e24:	0011      	movs	r1, r2
 8000e26:	0018      	movs	r0, r3
 8000e28:	f7ff fb34 	bl	8000494 <gpio_config>

	lsm6dso32_cs_high();
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <lsm6dso32_init+0xd4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2201      	movs	r2, #1
 8000e32:	2107      	movs	r1, #7
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff fc11 	bl	800065c <gpio_set_val>
	wait(100);
 8000e3a:	2064      	movs	r0, #100	; 0x64
 8000e3c:	f000 fc36 	bl	80016ac <wait>

	uint8_t tx_data[2];
	uint8_t rx_data[2];

	tx_data[0] = LSM6DSO32_CTRL2_G;
 8000e40:	240c      	movs	r4, #12
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	2211      	movs	r2, #17
 8000e46:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0b01101100; // 416Hz rate + 2000dps
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	226c      	movs	r2, #108	; 0x6c
 8000e4c:	705a      	strb	r2, [r3, #1]

	lsm6dso32_cs_low();
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <lsm6dso32_init+0xd4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2200      	movs	r2, #0
 8000e54:	2107      	movs	r1, #7
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff fc00 	bl	800065c <gpio_set_val>

	if(spi_transaction(SPI1,tx_data,rx_data, 2) != SYSTEM_OK) {
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <lsm6dso32_init+0xcc>)
 8000e5e:	6818      	ldr	r0, [r3, #0]
 8000e60:	2308      	movs	r3, #8
 8000e62:	18fa      	adds	r2, r7, r3
 8000e64:	1939      	adds	r1, r7, r4
 8000e66:	2302      	movs	r3, #2
 8000e68:	f000 fb90 	bl	800158c <spi_transaction>
 8000e6c:	1e03      	subs	r3, r0, #0
 8000e6e:	d001      	beq.n	8000e74 <lsm6dso32_init+0xb0>
		return HAL_DRV_ERROR;
 8000e70:	2302      	movs	r3, #2
 8000e72:	e007      	b.n	8000e84 <lsm6dso32_init+0xc0>
	}

	lsm6dso32_cs_high();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <lsm6dso32_init+0xd4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2107      	movs	r1, #7
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f7ff fbed 	bl	800065c <gpio_set_val>

	return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	0018      	movs	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b007      	add	sp, #28
 8000e8a:	bd90      	pop	{r4, r7, pc}
 8000e8c:	20000044 	.word	0x20000044
 8000e90:	20000014 	.word	0x20000014
 8000e94:	08001ddc 	.word	0x08001ddc
 8000e98:	20000004 	.word	0x20000004

08000e9c <read_axis_dps>:

hal_err_t read_axis_dps(lsm6dso32_axis_t axis, uint8_t *pVal) {
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[2];
	uint8_t rx_data[2];

	tx_data[0] = (LSM6DSO32_RW_CMD | axis);
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	4252      	negs	r2, r2
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	240c      	movs	r4, #12
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	701a      	strb	r2, [r3, #0]

	lsm6dso32_cs_low();
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <read_axis_dps+0x68>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2107      	movs	r1, #7
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff fbc9 	bl	800065c <gpio_set_val>

	if(spi_transaction(SPI1,tx_data,rx_data, 2) != SYSTEM_OK) {
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <read_axis_dps+0x6c>)
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	2308      	movs	r3, #8
 8000ed0:	18fa      	adds	r2, r7, r3
 8000ed2:	1939      	adds	r1, r7, r4
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f000 fb59 	bl	800158c <spi_transaction>
 8000eda:	1e03      	subs	r3, r0, #0
 8000edc:	d001      	beq.n	8000ee2 <read_axis_dps+0x46>
		return HAL_DRV_ERROR;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e00c      	b.n	8000efc <read_axis_dps+0x60>
	}

	lsm6dso32_cs_high();
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <read_axis_dps+0x68>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2107      	movs	r1, #7
 8000eea:	0018      	movs	r0, r3
 8000eec:	f7ff fbb6 	bl	800065c <gpio_set_val>

	*pVal = rx_data[1];
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	785a      	ldrb	r2, [r3, #1]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b005      	add	sp, #20
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	20000004 	.word	0x20000004
 8000f08:	20000014 	.word	0x20000014

08000f0c <hal_init>:



hal_err_t hal_init(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0

	// initialization and calibration the analog digital converter
	adc_config_t adc_cfg;
	adc_cfg.pin_num     = GPIO_0;
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
	adc_cfg.resolution  = ADC_RES_12_BIT;
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	705a      	strb	r2, [r3, #1]
	adc_cfg.sample_time = ADC_CYCLE_1_5;
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	709a      	strb	r2, [r3, #2]

	if (adc_init(&adc_cfg) != SYSTEM_OK) {
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	0018      	movs	r0, r3
 8000f28:	f7ff f900 	bl	800012c <adc_init>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d005      	beq.n	8000f3c <hal_init+0x30>
		print("HAL: Error Initialization analog digital converter");
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <hal_init+0x9c>)
 8000f32:	0018      	movs	r0, r3
 8000f34:	f000 fbd2 	bl	80016dc <print>
		return HAL_DRV_ERROR;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	e031      	b.n	8000fa0 <hal_init+0x94>
	}

	wait(500); // ADC must run for some time before calibration can start
 8000f3c:	23fa      	movs	r3, #250	; 0xfa
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	0018      	movs	r0, r3
 8000f42:	f000 fbb3 	bl	80016ac <wait>
	//adc_cal();

	if (adc_cal() != SYSTEM_OK) {
 8000f46:	f7ff f967 	bl	8000218 <adc_cal>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d005      	beq.n	8000f5a <hal_init+0x4e>
		print("HAL: Error to calibration the analog digital converter");
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <hal_init+0xa0>)
 8000f50:	0018      	movs	r0, r3
 8000f52:	f000 fbc3 	bl	80016dc <print>
		return HAL_DRV_ERROR;
 8000f56:	2302      	movs	r3, #2
 8000f58:	e022      	b.n	8000fa0 <hal_init+0x94>
	}

	// initialization the rn4020 bluetoothLE module
	if (rn4020_init() != HAL_OK) {
 8000f5a:	f7ff fd7d 	bl	8000a58 <rn4020_init>
 8000f5e:	1e03      	subs	r3, r0, #0
 8000f60:	d005      	beq.n	8000f6e <hal_init+0x62>
		print("HAL: Error Initialization BluetoothLE Module");
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <hal_init+0xa4>)
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 fbb9 	bl	80016dc <print>
		return HAL_DRV_ERROR;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e018      	b.n	8000fa0 <hal_init+0x94>
	}

	// initialization the digital potentiometer mcp4241
	if (mcp4241_init() != HAL_OK) {
 8000f6e:	f7ff fbff 	bl	8000770 <mcp4241_init>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d005      	beq.n	8000f82 <hal_init+0x76>
		print("HAL: Error Initialization Digital Potentiometer");
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <hal_init+0xa8>)
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f000 fbaf 	bl	80016dc <print>
		return HAL_DRV_ERROR;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e00e      	b.n	8000fa0 <hal_init+0x94>
	}

	// initialization the gyro-accelometer lsm6dso32
	if (lsm6dso32_init() != HAL_OK) {
 8000f82:	f7ff ff1f 	bl	8000dc4 <lsm6dso32_init>
 8000f86:	1e03      	subs	r3, r0, #0
 8000f88:	d005      	beq.n	8000f96 <hal_init+0x8a>
		print("HAL: Error Initialization Gyroscope");
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <hal_init+0xac>)
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f000 fba5 	bl	80016dc <print>
		return HAL_DRV_ERROR;
 8000f92:	2302      	movs	r3, #2
 8000f94:	e004      	b.n	8000fa0 <hal_init+0x94>
	}

	print("HAL: Initialization success");
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <hal_init+0xb0>)
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f000 fb9f 	bl	80016dc <print>

	return HAL_OK;
 8000f9e:	2300      	movs	r3, #0

}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	08001ea4 	.word	0x08001ea4
 8000fac:	08001ed8 	.word	0x08001ed8
 8000fb0:	08001f10 	.word	0x08001f10
 8000fb4:	08001f40 	.word	0x08001f40
 8000fb8:	08001f70 	.word	0x08001f70
 8000fbc:	08001f94 	.word	0x08001f94

08000fc0 <USART1_IRQHandler>:
uint8_t ble_rx_buffer[BLE_RX_BUFFER_SIZE];
uint8_t ble_tx_buffer[BLE_TX_BUFFER_SIZE];



void USART1_IRQHandler(void){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

	uint8_t rx_data;

	if (usart_receive(USART1, &rx_data) != SYSTEM_OK) {
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <USART1_IRQHandler+0x48>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1dfa      	adds	r2, r7, #7
 8000fcc:	0011      	movs	r1, r2
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 fe16 	bl	8001c00 <usart_receive>
 8000fd4:	1e03      	subs	r3, r0, #0
 8000fd6:	d003      	beq.n	8000fe0 <USART1_IRQHandler+0x20>
		print("System: Error Receive from BluetoothLe Module");
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <USART1_IRQHandler+0x4c>)
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f000 fb7e 	bl	80016dc <print>
	}

	if (ble_rx_fifo.state != FIFO_FULL) {
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <USART1_IRQHandler+0x50>)
 8000fe2:	7a9b      	ldrb	r3, [r3, #10]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d007      	beq.n	8000ff8 <USART1_IRQHandler+0x38>
		fifo_write(&ble_rx_fifo, rx_data);
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	781a      	ldrb	r2, [r3, #0]
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <USART1_IRQHandler+0x50>)
 8000fee:	0011      	movs	r1, r2
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff f9b4 	bl	800035e <fifo_write>
		//print("BLE Receive FIFO has add an Element");

	} else {
		print("BLE Receive FIFO is full");
	}
}
 8000ff6:	e003      	b.n	8001000 <USART1_IRQHandler+0x40>
		print("BLE Receive FIFO is full");
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <USART1_IRQHandler+0x54>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f000 fb6e 	bl	80016dc <print>
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000020 	.word	0x20000020
 800100c:	08001fb0 	.word	0x08001fb0
 8001010:	20000048 	.word	0x20000048
 8001014:	08001fe0 	.word	0x08001fe0

08001018 <__Task_1>:


void __Task_1(void){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0


	union bit16_t value_16bit;

	fifo_write(&ble_tx_fifo, BLE_APP_TRANSFER_CMD);
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <__Task_1+0x9c>)
 8001020:	21c0      	movs	r1, #192	; 0xc0
 8001022:	0018      	movs	r0, r3
 8001024:	f7ff f99b 	bl	800035e <fifo_write>

	//static uint16_t inc = 0;


	// read force sensor
	if (read_voltage(&value_16bit.uiValue) != HAL_OK) {
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	0018      	movs	r0, r3
 800102c:	f7ff fb68 	bl	8000700 <read_voltage>
 8001030:	1e03      	subs	r3, r0, #0
 8001032:	d003      	beq.n	800103c <__Task_1+0x24>
		print("HAL: Error read ADC voltage from force sensor");
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <__Task_1+0xa0>)
 8001036:	0018      	movs	r0, r3
 8001038:	f000 fb50 	bl	80016dc <print>
	}
	//value_16bit.uiValue = inc;

	fifo_write(&ble_tx_fifo, value_16bit.abyValue[0]);
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <__Task_1+0x9c>)
 8001042:	0011      	movs	r1, r2
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff f98a 	bl	800035e <fifo_write>
	fifo_write(&ble_tx_fifo, value_16bit.abyValue[1]);
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	785a      	ldrb	r2, [r3, #1]
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <__Task_1+0x9c>)
 8001050:	0011      	movs	r1, r2
 8001052:	0018      	movs	r0, r3
 8001054:	f7ff f983 	bl	800035e <fifo_write>
			inc++;
		}
*/
	// read gyro sensor
	uint8_t axis_dps;
	if (read_axis_dps(LSM6DSO32_AXIS_Z_L, &axis_dps) != HAL_OK) {
 8001058:	1cfb      	adds	r3, r7, #3
 800105a:	0019      	movs	r1, r3
 800105c:	2026      	movs	r0, #38	; 0x26
 800105e:	f7ff ff1d 	bl	8000e9c <read_axis_dps>
 8001062:	1e03      	subs	r3, r0, #0
 8001064:	d003      	beq.n	800106e <__Task_1+0x56>
		print("HAL: Error read dps axis z low on gyroscope");
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <__Task_1+0xa4>)
 8001068:	0018      	movs	r0, r3
 800106a:	f000 fb37 	bl	80016dc <print>
	}

	fifo_write(&ble_tx_fifo, axis_dps);
 800106e:	1cfb      	adds	r3, r7, #3
 8001070:	781a      	ldrb	r2, [r3, #0]
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <__Task_1+0x9c>)
 8001074:	0011      	movs	r1, r2
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff f971 	bl	800035e <fifo_write>

	if (read_axis_dps(LSM6DSO32_AXIS_Z_H, &axis_dps) != HAL_OK) {
 800107c:	1cfb      	adds	r3, r7, #3
 800107e:	0019      	movs	r1, r3
 8001080:	2027      	movs	r0, #39	; 0x27
 8001082:	f7ff ff0b 	bl	8000e9c <read_axis_dps>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d003      	beq.n	8001092 <__Task_1+0x7a>
		print("HAL: Error read dps axis z high on gyroscope");
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <__Task_1+0xa8>)
 800108c:	0018      	movs	r0, r3
 800108e:	f000 fb25 	bl	80016dc <print>
	}

	fifo_write(&ble_tx_fifo, axis_dps);
 8001092:	1cfb      	adds	r3, r7, #3
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <__Task_1+0x9c>)
 8001098:	0011      	movs	r1, r2
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff f95f 	bl	800035e <fifo_write>

	fifo_write(&ble_tx_fifo, 10); // "\n"
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <__Task_1+0x9c>)
 80010a2:	210a      	movs	r1, #10
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff f95a 	bl	800035e <fifo_write>

}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	20000054 	.word	0x20000054
 80010b8:	08001ffc 	.word	0x08001ffc
 80010bc:	0800202c 	.word	0x0800202c
 80010c0:	08002058 	.word	0x08002058

080010c4 <__Task_2>:
uint8_t gain    = 0;
bool_t app_cmd_receive_flag = false;



void __Task_2(void){
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0



	wait(42);
 80010ca:	202a      	movs	r0, #42	; 0x2a
 80010cc:	f000 faee 	bl	80016ac <wait>





	if (ble_rx_fifo.state != FIFO_EMPTY) {
 80010d0:	4b7b      	ldr	r3, [pc, #492]	; (80012c0 <__Task_2+0x1fc>)
 80010d2:	7a9b      	ldrb	r3, [r3, #10]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d036      	beq.n	8001146 <__Task_2+0x82>
		rx_data[rx_data_index] = fifo_read(&ble_rx_fifo);
 80010d8:	4b7a      	ldr	r3, [pc, #488]	; (80012c4 <__Task_2+0x200>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	001c      	movs	r4, r3
 80010de:	4b78      	ldr	r3, [pc, #480]	; (80012c0 <__Task_2+0x1fc>)
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff f97a 	bl	80003da <fifo_read>
 80010e6:	0003      	movs	r3, r0
 80010e8:	001a      	movs	r2, r3
 80010ea:	4b77      	ldr	r3, [pc, #476]	; (80012c8 <__Task_2+0x204>)
 80010ec:	551a      	strb	r2, [r3, r4]
		rx_data_index++;
 80010ee:	4b75      	ldr	r3, [pc, #468]	; (80012c4 <__Task_2+0x200>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b73      	ldr	r3, [pc, #460]	; (80012c4 <__Task_2+0x200>)
 80010f8:	701a      	strb	r2, [r3, #0]
		if(rx_data[rx_data_index - 1] == 10) { // "\n"
 80010fa:	4b72      	ldr	r3, [pc, #456]	; (80012c4 <__Task_2+0x200>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3b01      	subs	r3, #1
 8001100:	4a71      	ldr	r2, [pc, #452]	; (80012c8 <__Task_2+0x204>)
 8001102:	5cd3      	ldrb	r3, [r2, r3]
 8001104:	2b0a      	cmp	r3, #10
 8001106:	d11e      	bne.n	8001146 <__Task_2+0x82>
			// Length = 4, Byte_0 = app_cmd_wr => Data is from Smartphone
			if ((rx_data_index == 5) && (rx_data[0] == BLE_APP_TRANSFER_CMD)) {
 8001108:	4b6e      	ldr	r3, [pc, #440]	; (80012c4 <__Task_2+0x200>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b05      	cmp	r3, #5
 800110e:	d10b      	bne.n	8001128 <__Task_2+0x64>
 8001110:	4b6d      	ldr	r3, [pc, #436]	; (80012c8 <__Task_2+0x204>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2bc0      	cmp	r3, #192	; 0xc0
 8001116:	d107      	bne.n	8001128 <__Task_2+0x64>
				app_cmd_receive_flag = true;
 8001118:	4b6c      	ldr	r3, [pc, #432]	; (80012cc <__Task_2+0x208>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
				print("Receive Command from Smartphone");
 800111e:	4b6c      	ldr	r3, [pc, #432]	; (80012d0 <__Task_2+0x20c>)
 8001120:	0018      	movs	r0, r3
 8001122:	f000 fadb 	bl	80016dc <print>
 8001126:	e00b      	b.n	8001140 <__Task_2+0x7c>
			} else {
				// Message is directly from RN4020
				print("Message from RN4020 - OS");
 8001128:	4b6a      	ldr	r3, [pc, #424]	; (80012d4 <__Task_2+0x210>)
 800112a:	0018      	movs	r0, r3
 800112c:	f000 fad6 	bl	80016dc <print>
				usart_send(USART2, rx_data, rx_data_index); // print Message
 8001130:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <__Task_2+0x214>)
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	4b63      	ldr	r3, [pc, #396]	; (80012c4 <__Task_2+0x200>)
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <__Task_2+0x204>)
 800113a:	0019      	movs	r1, r3
 800113c:	f000 fd26 	bl	8001b8c <usart_send>
			}
			rx_data_index = 0;
 8001140:	4b60      	ldr	r3, [pc, #384]	; (80012c4 <__Task_2+0x200>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
	if (rx_data_index >= BLE_RX_BUFFER_SIZE) {
		rx_data_index = 0;
	}

	// Handle received instructions from smartphone-application
	if (app_cmd_receive_flag == true) {
 8001146:	4b61      	ldr	r3, [pc, #388]	; (80012cc <__Task_2+0x208>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d15e      	bne.n	800120c <__Task_2+0x148>
		switch (rx_data[1]) {   // instruction
 800114e:	4b5e      	ldr	r3, [pc, #376]	; (80012c8 <__Task_2+0x204>)
 8001150:	785b      	ldrb	r3, [r3, #1]
 8001152:	3b81      	subs	r3, #129	; 0x81
 8001154:	2b0a      	cmp	r3, #10
 8001156:	d846      	bhi.n	80011e6 <__Task_2+0x122>
 8001158:	009a      	lsls	r2, r3, #2
 800115a:	4b60      	ldr	r3, [pc, #384]	; (80012dc <__Task_2+0x218>)
 800115c:	18d3      	adds	r3, r2, r3
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	469f      	mov	pc, r3
		    case INST_GAIN_INC:
		    	if (mcp4241_incr(MCP4241_VOLATILE_WIPER_0) != HAL_OK) {
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fb7a 	bl	800085c <mcp4241_incr>
 8001168:	1e03      	subs	r3, r0, #0
 800116a:	d041      	beq.n	80011f0 <__Task_2+0x12c>
		    		print("HAL: Error increment gain");
 800116c:	4b5c      	ldr	r3, [pc, #368]	; (80012e0 <__Task_2+0x21c>)
 800116e:	0018      	movs	r0, r3
 8001170:	f000 fab4 	bl	80016dc <print>
		    	}
		        break;
 8001174:	e03c      	b.n	80011f0 <__Task_2+0x12c>
		    case INST_GAIN_DEC:
		    	if (mcp4241_decr(MCP4241_VOLATILE_WIPER_0) != HAL_OK) {
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff fbac 	bl	80008d4 <mcp4241_decr>
 800117c:	1e03      	subs	r3, r0, #0
 800117e:	d039      	beq.n	80011f4 <__Task_2+0x130>
		    		print("HAL: Error decrement gain");
 8001180:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <__Task_2+0x220>)
 8001182:	0018      	movs	r0, r3
 8001184:	f000 faaa 	bl	80016dc <print>
		    	}
		        break;
 8001188:	e034      	b.n	80011f4 <__Task_2+0x130>
		    case INST_GAIN_WR:
		        if (mcp4241_write(MCP4241_VOLATILE_WIPER_0, rx_data[2]) != HAL_OK) {
 800118a:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <__Task_2+0x204>)
 800118c:	789b      	ldrb	r3, [r3, #2]
 800118e:	0019      	movs	r1, r3
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fbdb 	bl	800094c <mcp4241_write>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d02e      	beq.n	80011f8 <__Task_2+0x134>
		        	print("HAL: Error write gain");
 800119a:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <__Task_2+0x224>)
 800119c:	0018      	movs	r0, r3
 800119e:	f000 fa9d 	bl	80016dc <print>
		        }
		        break;
 80011a2:	e029      	b.n	80011f8 <__Task_2+0x134>
		    case INST_OFFSET_INC:
		    	if (mcp4241_incr(MCP4241_VOLATILE_WIPER_1) != HAL_OK) {
 80011a4:	2001      	movs	r0, #1
 80011a6:	f7ff fb59 	bl	800085c <mcp4241_incr>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d026      	beq.n	80011fc <__Task_2+0x138>
		    		print("HAL: Error increment offset");
 80011ae:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <__Task_2+0x228>)
 80011b0:	0018      	movs	r0, r3
 80011b2:	f000 fa93 	bl	80016dc <print>
		    	}
		        break;
 80011b6:	e021      	b.n	80011fc <__Task_2+0x138>
		    case INST_OFFSET_DEC:
		    	if (mcp4241_decr(MCP4241_VOLATILE_WIPER_1) != HAL_OK) {
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff fb8b 	bl	80008d4 <mcp4241_decr>
 80011be:	1e03      	subs	r3, r0, #0
 80011c0:	d01e      	beq.n	8001200 <__Task_2+0x13c>
		    		print("HAL: Error decrement offset");
 80011c2:	4b4b      	ldr	r3, [pc, #300]	; (80012f0 <__Task_2+0x22c>)
 80011c4:	0018      	movs	r0, r3
 80011c6:	f000 fa89 	bl	80016dc <print>
		    	}
		        break;
 80011ca:	e019      	b.n	8001200 <__Task_2+0x13c>
		    case INST_OFFSET_WR:
		        if (mcp4241_write(MCP4241_VOLATILE_WIPER_1, rx_data[2]) != HAL_OK) {
 80011cc:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <__Task_2+0x204>)
 80011ce:	789b      	ldrb	r3, [r3, #2]
 80011d0:	0019      	movs	r1, r3
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff fbba 	bl	800094c <mcp4241_write>
 80011d8:	1e03      	subs	r3, r0, #0
 80011da:	d013      	beq.n	8001204 <__Task_2+0x140>
		        	print("HAL: Error write offset");
 80011dc:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <__Task_2+0x230>)
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 fa7c 	bl	80016dc <print>
		        }
		        break;
 80011e4:	e00e      	b.n	8001204 <__Task_2+0x140>
		    default:
		        print("APP Transfer: No valid Instruction");
 80011e6:	4b44      	ldr	r3, [pc, #272]	; (80012f8 <__Task_2+0x234>)
 80011e8:	0018      	movs	r0, r3
 80011ea:	f000 fa77 	bl	80016dc <print>
		        break;
 80011ee:	e00a      	b.n	8001206 <__Task_2+0x142>
		        break;
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	e008      	b.n	8001206 <__Task_2+0x142>
		        break;
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	e006      	b.n	8001206 <__Task_2+0x142>
		        break;
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	e004      	b.n	8001206 <__Task_2+0x142>
		        break;
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	e002      	b.n	8001206 <__Task_2+0x142>
		        break;
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	e000      	b.n	8001206 <__Task_2+0x142>
		        break;
 8001204:	46c0      	nop			; (mov r8, r8)
		}

		app_cmd_receive_flag = false;
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <__Task_2+0x208>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]


	// read the actually value and save into internal eeprom

	// => gain
	if (mcp4241_read(MCP4241_VOLATILE_WIPER_0, &gain) != HAL_OK) {
 800120c:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <__Task_2+0x238>)
 800120e:	0019      	movs	r1, r3
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fbdd 	bl	80009d0 <mcp4241_read>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d003      	beq.n	8001222 <__Task_2+0x15e>
		print("HAL: Error read gain");
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <__Task_2+0x23c>)
 800121c:	0018      	movs	r0, r3
 800121e:	f000 fa5d 	bl	80016dc <print>
	}

	if (mcp4241_write(MCP4241_EEPROM_0, gain) != HAL_OK) {
 8001222:	4b36      	ldr	r3, [pc, #216]	; (80012fc <__Task_2+0x238>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	0019      	movs	r1, r3
 8001228:	2006      	movs	r0, #6
 800122a:	f7ff fb8f 	bl	800094c <mcp4241_write>
 800122e:	1e03      	subs	r3, r0, #0
 8001230:	d003      	beq.n	800123a <__Task_2+0x176>
		print("HAL: Error write gain into eeprom");
 8001232:	4b34      	ldr	r3, [pc, #208]	; (8001304 <__Task_2+0x240>)
 8001234:	0018      	movs	r0, r3
 8001236:	f000 fa51 	bl	80016dc <print>
	}

	// => offset
	if (mcp4241_read(MCP4241_VOLATILE_WIPER_1, &offset) != HAL_OK) {
 800123a:	4b33      	ldr	r3, [pc, #204]	; (8001308 <__Task_2+0x244>)
 800123c:	0019      	movs	r1, r3
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff fbc6 	bl	80009d0 <mcp4241_read>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d003      	beq.n	8001250 <__Task_2+0x18c>
		print("HAL: Error read offset");
 8001248:	4b30      	ldr	r3, [pc, #192]	; (800130c <__Task_2+0x248>)
 800124a:	0018      	movs	r0, r3
 800124c:	f000 fa46 	bl	80016dc <print>
	}

	if (mcp4241_write(MCP4241_EEPROM_1, offset) != HAL_OK) {
 8001250:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <__Task_2+0x244>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	0019      	movs	r1, r3
 8001256:	2007      	movs	r0, #7
 8001258:	f7ff fb78 	bl	800094c <mcp4241_write>
 800125c:	1e03      	subs	r3, r0, #0
 800125e:	d003      	beq.n	8001268 <__Task_2+0x1a4>
		print("HAL: Error write offset into eeprom");
 8001260:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <__Task_2+0x24c>)
 8001262:	0018      	movs	r0, r3
 8001264:	f000 fa3a 	bl	80016dc <print>
	}


	// automatic connection
	rn4020_connect();
 8001268:	f7ff fd62 	bl	8000d30 <rn4020_connect>

	// transfer data

	uint8_t tx_data[24];
	if (rn4020_get_connect_state() == true) {
 800126c:	f7ff fda0 	bl	8000db0 <rn4020_get_connect_state>
 8001270:	0003      	movs	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d120      	bne.n	80012b8 <__Task_2+0x1f4>
		for (uint8_t i = 0; i < 24; i++) {
 8001276:	231f      	movs	r3, #31
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	e00f      	b.n	80012a0 <__Task_2+0x1dc>
			tx_data[i] = fifo_read(&ble_tx_fifo);
 8001280:	251f      	movs	r5, #31
 8001282:	197b      	adds	r3, r7, r5
 8001284:	781c      	ldrb	r4, [r3, #0]
 8001286:	4b23      	ldr	r3, [pc, #140]	; (8001314 <__Task_2+0x250>)
 8001288:	0018      	movs	r0, r3
 800128a:	f7ff f8a6 	bl	80003da <fifo_read>
 800128e:	0003      	movs	r3, r0
 8001290:	001a      	movs	r2, r3
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	551a      	strb	r2, [r3, r4]
		for (uint8_t i = 0; i < 24; i++) {
 8001296:	197b      	adds	r3, r7, r5
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	197b      	adds	r3, r7, r5
 800129c:	3201      	adds	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	231f      	movs	r3, #31
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b17      	cmp	r3, #23
 80012a8:	d9ea      	bls.n	8001280 <__Task_2+0x1bc>
		}
		usart_send(USART1, tx_data, 24);
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <__Task_2+0x254>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	1d39      	adds	r1, r7, #4
 80012b0:	2218      	movs	r2, #24
 80012b2:	0018      	movs	r0, r3
 80012b4:	f000 fc6a 	bl	8001b8c <usart_send>
	}



}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b008      	add	sp, #32
 80012be:	bdb0      	pop	{r4, r5, r7, pc}
 80012c0:	20000048 	.word	0x20000048
 80012c4:	20001860 	.word	0x20001860
 80012c8:	20001460 	.word	0x20001460
 80012cc:	20001863 	.word	0x20001863
 80012d0:	08002088 	.word	0x08002088
 80012d4:	080020a8 	.word	0x080020a8
 80012d8:	20000024 	.word	0x20000024
 80012dc:	08002254 	.word	0x08002254
 80012e0:	080020c4 	.word	0x080020c4
 80012e4:	080020e0 	.word	0x080020e0
 80012e8:	080020fc 	.word	0x080020fc
 80012ec:	08002114 	.word	0x08002114
 80012f0:	08002130 	.word	0x08002130
 80012f4:	0800214c 	.word	0x0800214c
 80012f8:	08002164 	.word	0x08002164
 80012fc:	20001862 	.word	0x20001862
 8001300:	08002188 	.word	0x08002188
 8001304:	080021a0 	.word	0x080021a0
 8001308:	20001861 	.word	0x20001861
 800130c:	080021c4 	.word	0x080021c4
 8001310:	080021dc 	.word	0x080021dc
 8001314:	20000054 	.word	0x20000054
 8001318:	20000020 	.word	0x20000020

0800131c <__Run_Up>:


void __Run_Up(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

	if (init_system() != SYSTEM_OK) {
 8001320:	f000 fa68 	bl	80017f4 <init_system>
 8001324:	1e03      	subs	r3, r0, #0
 8001326:	d003      	beq.n	8001330 <__Run_Up+0x14>
		print("SYSTEM: Error initialize");
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <__Run_Up+0x48>)
 800132a:	0018      	movs	r0, r3
 800132c:	f000 f9d6 	bl	80016dc <print>
	}

	if (hal_init() != HAL_OK) {
 8001330:	f7ff fdec 	bl	8000f0c <hal_init>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d003      	beq.n	8001340 <__Run_Up+0x24>
		print("HAL: Error initialize");
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <__Run_Up+0x4c>)
 800133a:	0018      	movs	r0, r3
 800133c:	f000 f9ce 	bl	80016dc <print>
	}

	fifo_init(&ble_rx_fifo, ble_rx_buffer, BLE_RX_BUFFER_SIZE);
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	00da      	lsls	r2, r3, #3
 8001344:	4909      	ldr	r1, [pc, #36]	; (800136c <__Run_Up+0x50>)
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <__Run_Up+0x54>)
 8001348:	0018      	movs	r0, r3
 800134a:	f7fe ffed 	bl	8000328 <fifo_init>
	fifo_init(&ble_tx_fifo, ble_tx_buffer, BLE_TX_BUFFER_SIZE);
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	015a      	lsls	r2, r3, #5
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__Run_Up+0x58>)
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <__Run_Up+0x5c>)
 8001356:	0018      	movs	r0, r3
 8001358:	f7fe ffe6 	bl	8000328 <fifo_init>
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	08002200 	.word	0x08002200
 8001368:	0800221c 	.word	0x0800221c
 800136c:	20000060 	.word	0x20000060
 8001370:	20000048 	.word	0x20000048
 8001374:	20000460 	.word	0x20000460
 8001378:	20000054 	.word	0x20000054

0800137c <main>:


int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	__OS();
 8001380:	f000 f95c 	bl	800163c <__OS>
 8001384:	2300      	movs	r3, #0
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <spix_reset>:

spi_reg_t *SPI1 = (spi_reg_t *) SPI1_BASE;
spi_reg_t *SPI2 = (spi_reg_t *) SPI2_BASE;


void spix_reset(){
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	RCC_APB2RSTR |= APBx_SPI1;
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <spix_reset+0x40>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <spix_reset+0x40>)
 8001396:	2180      	movs	r1, #128	; 0x80
 8001398:	0149      	lsls	r1, r1, #5
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
	RCC_APB2RSTR &= ~APBx_SPI1;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <spix_reset+0x40>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <spix_reset+0x40>)
 80013a4:	490a      	ldr	r1, [pc, #40]	; (80013d0 <spix_reset+0x44>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]
	RCC_APB1RSTR |= APBx_SPI2;
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <spix_reset+0x48>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <spix_reset+0x48>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	01c9      	lsls	r1, r1, #7
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]
	RCC_APB1RSTR &= ~APBx_SPI2;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <spix_reset+0x48>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <spix_reset+0x48>)
 80013be:	4906      	ldr	r1, [pc, #24]	; (80013d8 <spix_reset+0x4c>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	40021024 	.word	0x40021024
 80013d0:	ffffefff 	.word	0xffffefff
 80013d4:	40021028 	.word	0x40021028
 80013d8:	ffffbfff 	.word	0xffffbfff

080013dc <spi_init>:

void spi_init(spi_reg_t *pDrv, spi_config_t *pConfig){
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	gpio_config_t gpio_cfg;

	pDrv->CR1 &= ~SPI_CR_SPE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2240      	movs	r2, #64	; 0x40
 80013ec:	4393      	bics	r3, r2
 80013ee:	001a      	movs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	601a      	str	r2, [r3, #0]

	if(pDrv == SPI1){
 80013f4:	4b60      	ldr	r3, [pc, #384]	; (8001578 <spi_init+0x19c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d14e      	bne.n	800149c <spi_init+0xc0>
		RCC_APB2ENR |= APBx_SPI1;
 80013fe:	4b5f      	ldr	r3, [pc, #380]	; (800157c <spi_init+0x1a0>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b5e      	ldr	r3, [pc, #376]	; (800157c <spi_init+0x1a0>)
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0149      	lsls	r1, r1, #5
 8001408:	430a      	orrs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
		// sck
		gpio_cfg.pin         = GPIO_5;
 800140c:	2108      	movs	r1, #8
 800140e:	187b      	adds	r3, r7, r1
 8001410:	2205      	movs	r2, #5
 8001412:	701a      	strb	r2, [r3, #0]
		gpio_cfg.func_mode   = GPIO_FUNC_MODE_AF0;
 8001414:	187b      	adds	r3, r7, r1
 8001416:	2202      	movs	r2, #2
 8001418:	705a      	strb	r2, [r3, #1]
		gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 800141a:	187b      	adds	r3, r7, r1
 800141c:	2200      	movs	r2, #0
 800141e:	709a      	strb	r2, [r3, #2]
		gpio_cfg.speed_mode  = GPIO_SPEED_MODE_HIGH_SPEED;
 8001420:	187b      	adds	r3, r7, r1
 8001422:	2202      	movs	r2, #2
 8001424:	70da      	strb	r2, [r3, #3]
		gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2200      	movs	r2, #0
 800142a:	711a      	strb	r2, [r3, #4]
		gpio_config(GPIOA, &gpio_cfg);
 800142c:	4b54      	ldr	r3, [pc, #336]	; (8001580 <spi_init+0x1a4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	000c      	movs	r4, r1
 8001432:	187a      	adds	r2, r7, r1
 8001434:	0011      	movs	r1, r2
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff f82c 	bl	8000494 <gpio_config>
		// miso
		gpio_cfg.pin         = GPIO_6;
 800143c:	0021      	movs	r1, r4
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2206      	movs	r2, #6
 8001442:	701a      	strb	r2, [r3, #0]
		gpio_cfg.func_mode   = GPIO_FUNC_MODE_AF0;
 8001444:	187b      	adds	r3, r7, r1
 8001446:	2202      	movs	r2, #2
 8001448:	705a      	strb	r2, [r3, #1]
		gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2200      	movs	r2, #0
 800144e:	709a      	strb	r2, [r3, #2]
		gpio_cfg.speed_mode  = GPIO_SPEED_MODE_HIGH_SPEED;
 8001450:	187b      	adds	r3, r7, r1
 8001452:	2202      	movs	r2, #2
 8001454:	70da      	strb	r2, [r3, #3]
		gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8001456:	187b      	adds	r3, r7, r1
 8001458:	2200      	movs	r2, #0
 800145a:	711a      	strb	r2, [r3, #4]
		gpio_config(GPIOA, &gpio_cfg);
 800145c:	4b48      	ldr	r3, [pc, #288]	; (8001580 <spi_init+0x1a4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	000c      	movs	r4, r1
 8001462:	187a      	adds	r2, r7, r1
 8001464:	0011      	movs	r1, r2
 8001466:	0018      	movs	r0, r3
 8001468:	f7ff f814 	bl	8000494 <gpio_config>
		// mosi
		gpio_cfg.pin         = GPIO_7;
 800146c:	0021      	movs	r1, r4
 800146e:	187b      	adds	r3, r7, r1
 8001470:	2207      	movs	r2, #7
 8001472:	701a      	strb	r2, [r3, #0]
		gpio_cfg.func_mode   = GPIO_FUNC_MODE_AF0;
 8001474:	187b      	adds	r3, r7, r1
 8001476:	2202      	movs	r2, #2
 8001478:	705a      	strb	r2, [r3, #1]
		gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 800147a:	187b      	adds	r3, r7, r1
 800147c:	2200      	movs	r2, #0
 800147e:	709a      	strb	r2, [r3, #2]
		gpio_cfg.speed_mode  = GPIO_SPEED_MODE_HIGH_SPEED;
 8001480:	187b      	adds	r3, r7, r1
 8001482:	2202      	movs	r2, #2
 8001484:	70da      	strb	r2, [r3, #3]
		gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8001486:	187b      	adds	r3, r7, r1
 8001488:	2200      	movs	r2, #0
 800148a:	711a      	strb	r2, [r3, #4]
		gpio_config(GPIOA, &gpio_cfg);
 800148c:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <spi_init+0x1a4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	187a      	adds	r2, r7, r1
 8001492:	0011      	movs	r1, r2
 8001494:	0018      	movs	r0, r3
 8001496:	f7fe fffd 	bl	8000494 <gpio_config>
 800149a:	e04d      	b.n	8001538 <spi_init+0x15c>
	}else{
		RCC_APB1ENR |= APBx_SPI2;
 800149c:	4b39      	ldr	r3, [pc, #228]	; (8001584 <spi_init+0x1a8>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b38      	ldr	r3, [pc, #224]	; (8001584 <spi_init+0x1a8>)
 80014a2:	2180      	movs	r1, #128	; 0x80
 80014a4:	01c9      	lsls	r1, r1, #7
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]
		// sck
		gpio_cfg.pin         = GPIO_13;
 80014aa:	2108      	movs	r1, #8
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	220d      	movs	r2, #13
 80014b0:	701a      	strb	r2, [r3, #0]
		gpio_cfg.func_mode   = GPIO_FUNC_MODE_AF0;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2202      	movs	r2, #2
 80014b6:	705a      	strb	r2, [r3, #1]
		gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2200      	movs	r2, #0
 80014bc:	709a      	strb	r2, [r3, #2]
		gpio_cfg.speed_mode  = GPIO_SPEED_MODE_HIGH_SPEED;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2202      	movs	r2, #2
 80014c2:	70da      	strb	r2, [r3, #3]
		gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	711a      	strb	r2, [r3, #4]
		gpio_config(GPIOB, &gpio_cfg);
 80014ca:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <spi_init+0x1ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	000c      	movs	r4, r1
 80014d0:	187a      	adds	r2, r7, r1
 80014d2:	0011      	movs	r1, r2
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7fe ffdd 	bl	8000494 <gpio_config>
		// miso
		gpio_cfg.pin         = GPIO_14;
 80014da:	0021      	movs	r1, r4
 80014dc:	187b      	adds	r3, r7, r1
 80014de:	220e      	movs	r2, #14
 80014e0:	701a      	strb	r2, [r3, #0]
		gpio_cfg.func_mode   = GPIO_FUNC_MODE_AF0;
 80014e2:	187b      	adds	r3, r7, r1
 80014e4:	2202      	movs	r2, #2
 80014e6:	705a      	strb	r2, [r3, #1]
		gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	2200      	movs	r2, #0
 80014ec:	709a      	strb	r2, [r3, #2]
		gpio_cfg.speed_mode  = GPIO_SPEED_MODE_HIGH_SPEED;
 80014ee:	187b      	adds	r3, r7, r1
 80014f0:	2202      	movs	r2, #2
 80014f2:	70da      	strb	r2, [r3, #3]
		gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 80014f4:	187b      	adds	r3, r7, r1
 80014f6:	2200      	movs	r2, #0
 80014f8:	711a      	strb	r2, [r3, #4]
		gpio_config(GPIOB, &gpio_cfg);
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <spi_init+0x1ac>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	000c      	movs	r4, r1
 8001500:	187a      	adds	r2, r7, r1
 8001502:	0011      	movs	r1, r2
 8001504:	0018      	movs	r0, r3
 8001506:	f7fe ffc5 	bl	8000494 <gpio_config>
		// mosi
		gpio_cfg.pin         = GPIO_15;
 800150a:	0021      	movs	r1, r4
 800150c:	187b      	adds	r3, r7, r1
 800150e:	220f      	movs	r2, #15
 8001510:	701a      	strb	r2, [r3, #0]
		gpio_cfg.func_mode   = GPIO_FUNC_MODE_AF0;
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2202      	movs	r2, #2
 8001516:	705a      	strb	r2, [r3, #1]
		gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2200      	movs	r2, #0
 800151c:	709a      	strb	r2, [r3, #2]
		gpio_cfg.speed_mode  = GPIO_SPEED_MODE_HIGH_SPEED;
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2202      	movs	r2, #2
 8001522:	70da      	strb	r2, [r3, #3]
		gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2200      	movs	r2, #0
 8001528:	711a      	strb	r2, [r3, #4]
		gpio_config(GPIOB, &gpio_cfg);
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <spi_init+0x1ac>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	187a      	adds	r2, r7, r1
 8001530:	0011      	movs	r1, r2
 8001532:	0018      	movs	r0, r3
 8001534:	f7fe ffae 	bl	8000494 <gpio_config>
	}

	// configure CR1
	pDrv->CR1 = (pConfig->mode | SPI_CR_MSTR | SPI_CR_SSM | SPI_CR_SSI);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2204      	movs	r2, #4
 800153e:	4313      	orrs	r3, r2
 8001540:	b2db      	uxtb	r3, r3
 8001542:	001a      	movs	r2, r3
 8001544:	23c0      	movs	r3, #192	; 0xc0
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	601a      	str	r2, [r3, #0]
	pDrv->CR1 |= ((pConfig->clk_div << 0x3) | pConfig->frame_format);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	7852      	ldrb	r2, [r2, #1]
 8001556:	00d2      	lsls	r2, r2, #3
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	7889      	ldrb	r1, [r1, #2]
 800155c:	430a      	orrs	r2, r1
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	601a      	str	r2, [r3, #0]
	configure CR2
	pDrv->CR2 = SPI_CR_DS_8BIT;
	*/

	// start spi
	pDrv->CR1 |= SPI_CR_SPE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2240      	movs	r2, #64	; 0x40
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	b005      	add	sp, #20
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	20000014 	.word	0x20000014
 800157c:	40021034 	.word	0x40021034
 8001580:	20000000 	.word	0x20000000
 8001584:	40021038 	.word	0x40021038
 8001588:	20000004 	.word	0x20000004

0800158c <spi_transaction>:
		}
	};
	return SYSTEM_OK;
}

system_err_t spi_transaction(spi_reg_t *pDrv, uint8_t *pTxBuf, uint8_t *pRxBuf, uint8_t len){
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	001a      	movs	r2, r3
 800159a:	1cfb      	adds	r3, r7, #3
 800159c:	701a      	strb	r2, [r3, #0]
	uint32_t ticks_pre = get_ticks();
 800159e:	f000 f8eb 	bl	8001778 <get_ticks>
 80015a2:	0003      	movs	r3, r0
 80015a4:	613b      	str	r3, [r7, #16]

	for (uint32_t i = 0; i < len; i++){
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	e02e      	b.n	800160a <spi_transaction+0x7e>
		while(!(pDrv->SR & SPI_SR_TXE)){
			if((get_ticks() - ticks_pre) >= SPI_TIMEOUT){
 80015ac:	f000 f8e4 	bl	8001778 <get_ticks>
 80015b0:	0002      	movs	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b4f      	cmp	r3, #79	; 0x4f
 80015b8:	d901      	bls.n	80015be <spi_transaction+0x32>
				return SPI_TRANSACTION_TIMEOUT;
 80015ba:	2305      	movs	r3, #5
 80015bc:	e03a      	b.n	8001634 <spi_transaction+0xa8>
		while(!(pDrv->SR & SPI_SR_TXE)){
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2202      	movs	r2, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d0f1      	beq.n	80015ac <spi_transaction+0x20>
			}
		}
		*(uint8_t *)&pDrv->DR = pTxBuf[i];
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	18d2      	adds	r2, r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	330c      	adds	r3, #12
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	701a      	strb	r2, [r3, #0]

		while(!(pDrv->SR & SPI_SR_RXNE)){
 80015d6:	e008      	b.n	80015ea <spi_transaction+0x5e>
			if((get_ticks() - ticks_pre) >= SPI_TIMEOUT){
 80015d8:	f000 f8ce 	bl	8001778 <get_ticks>
 80015dc:	0002      	movs	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b4f      	cmp	r3, #79	; 0x4f
 80015e4:	d901      	bls.n	80015ea <spi_transaction+0x5e>
				return SPI_TRANSACTION_TIMEOUT;
 80015e6:	2305      	movs	r3, #5
 80015e8:	e024      	b.n	8001634 <spi_transaction+0xa8>
		while(!(pDrv->SR & SPI_SR_RXNE)){
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2201      	movs	r2, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0f1      	beq.n	80015d8 <spi_transaction+0x4c>
			}
		}

		pRxBuf[i] = *(uint8_t *)&pDrv->DR;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	330c      	adds	r3, #12
 80015f8:	001a      	movs	r2, r3
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	18cb      	adds	r3, r1, r3
 8001600:	7812      	ldrb	r2, [r2, #0]
 8001602:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++){
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	1cfb      	adds	r3, r7, #3
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	429a      	cmp	r2, r3
 8001612:	d3d4      	bcc.n	80015be <spi_transaction+0x32>
		//uint32_t temp = pDrv->SR; => reset overflow flag
	}
	while(pDrv->SR & SPI_SR_BSY){
 8001614:	e008      	b.n	8001628 <spi_transaction+0x9c>
		if((get_ticks() - ticks_pre) >= SPI_TIMEOUT){
 8001616:	f000 f8af 	bl	8001778 <get_ticks>
 800161a:	0002      	movs	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b4f      	cmp	r3, #79	; 0x4f
 8001622:	d901      	bls.n	8001628 <spi_transaction+0x9c>
			return SPI_TRANSACTION_TIMEOUT;
 8001624:	2305      	movs	r3, #5
 8001626:	e005      	b.n	8001634 <spi_transaction+0xa8>
	while(pDrv->SR & SPI_SR_BSY){
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	4013      	ands	r3, r2
 8001630:	d1f1      	bne.n	8001616 <spi_transaction+0x8a>
		}
	}
	return SYSTEM_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	b006      	add	sp, #24
 800163a:	bd80      	pop	{r7, pc}

0800163c <__OS>:
static volatile uint32_t msTicks = 0;

static volatile task_control_t task_cntrl[3];


void __OS() {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
	// delay before init the system
	for (uint32_t j=0; j<524288; j++) {
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	e003      	b.n	8001650 <__OS+0x14>
		asm("NOP");
 8001648:	46c0      	nop			; (mov r8, r8)
	for (uint32_t j=0; j<524288; j++) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3301      	adds	r3, #1
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	031b      	lsls	r3, r3, #12
 8001656:	429a      	cmp	r2, r3
 8001658:	d3f6      	bcc.n	8001648 <__OS+0xc>
	}
	task_cntrl[0].task_func = __Run_Up;
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <__OS+0x5c>)
 800165c:	4a0f      	ldr	r2, [pc, #60]	; (800169c <__OS+0x60>)
 800165e:	601a      	str	r2, [r3, #0]
	task_cntrl[1].task_func = __Task_1;
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <__OS+0x5c>)
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <__OS+0x64>)
 8001664:	615a      	str	r2, [r3, #20]
	task_cntrl[2].task_func = __Task_2;
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <__OS+0x5c>)
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <__OS+0x68>)
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
	// Run Up Task for all Configuration
	task_cntrl[0].state = EXECUTE;
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <__OS+0x5c>)
 800166e:	2201      	movs	r2, #1
 8001670:	745a      	strb	r2, [r3, #17]
	task_cntrl[0].task_func();
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <__OS+0x5c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4798      	blx	r3
	task_cntrl[0].state = DONE;
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <__OS+0x5c>)
 800167a:	2203      	movs	r2, #3
 800167c:	745a      	strb	r2, [r3, #17]

	// Timer start => start task 1
	TIM2->CR1    |= TIMER_CR1_CEN;
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <__OS+0x6c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <__OS+0x6c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
	while(true) {
		// start with execute task's
		task_cntrl[2].task_func();
 800168e:	4b02      	ldr	r3, [pc, #8]	; (8001698 <__OS+0x5c>)
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	4798      	blx	r3
 8001694:	e7fb      	b.n	800168e <__OS+0x52>
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	20001868 	.word	0x20001868
 800169c:	0800131d 	.word	0x0800131d
 80016a0:	08001019 	.word	0x08001019
 80016a4:	080010c5 	.word	0x080010c5
 80016a8:	2000001c 	.word	0x2000001c

080016ac <wait>:
void task_config(task_config_t *pConfig) {
	task_cntrl[pConfig->task_num].count = pConfig->phase;
	task_cntrl[pConfig->task_num].freq  = pConfig->freq;
}

void wait(uint32_t ms){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	uint32_t TicksPre = msTicks;
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <wait+0x2c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
	while((msTicks - TicksPre) < ms){
 80016ba:	e000      	b.n	80016be <wait+0x12>
		asm("NOP");
 80016bc:	46c0      	nop			; (mov r8, r8)
	while((msTicks - TicksPre) < ms){
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <wait+0x2c>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <wait+0x10>
	}
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b004      	add	sp, #16
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	20001864 	.word	0x20001864

080016dc <print>:



// print function for testing
void print(const char *msg){
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b093      	sub	sp, #76	; 0x4c
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

	uint8_t i = 0;
 80016e4:	2347      	movs	r3, #71	; 0x47
 80016e6:	18fb      	adds	r3, r7, r3
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
	uint8_t TxBuf[63]; // message buffer

	// copy message
	while (*msg != 0){
 80016ec:	e00e      	b.n	800170c <print+0x30>
		TxBuf[i] = *msg++;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	2047      	movs	r0, #71	; 0x47
 80016f6:	183a      	adds	r2, r7, r0
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	7819      	ldrb	r1, [r3, #0]
 80016fc:	2308      	movs	r3, #8
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	5499      	strb	r1, [r3, r2]
		i++;
 8001702:	183b      	adds	r3, r7, r0
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	183b      	adds	r3, r7, r0
 8001708:	3201      	adds	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
	while (*msg != 0){
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1ec      	bne.n	80016ee <print+0x12>
	}
	// for console
	TxBuf[i] = '\r';  // no diagonal printing
 8001714:	2047      	movs	r0, #71	; 0x47
 8001716:	183b      	adds	r3, r7, r0
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2408      	movs	r4, #8
 800171c:	193a      	adds	r2, r7, r4
 800171e:	210d      	movs	r1, #13
 8001720:	54d1      	strb	r1, [r2, r3]
	i++;
 8001722:	183b      	adds	r3, r7, r0
 8001724:	781a      	ldrb	r2, [r3, #0]
 8001726:	183b      	adds	r3, r7, r0
 8001728:	3201      	adds	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
	TxBuf[i] = '\n'; // => println()
 800172c:	183b      	adds	r3, r7, r0
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	193a      	adds	r2, r7, r4
 8001732:	210a      	movs	r1, #10
 8001734:	54d1      	strb	r1, [r2, r3]
	i++;
 8001736:	0001      	movs	r1, r0
 8001738:	187b      	adds	r3, r7, r1
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	187b      	adds	r3, r7, r1
 800173e:	3201      	adds	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]

	usart_send(USART2, TxBuf, i);
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <print+0x80>)
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	187b      	adds	r3, r7, r1
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	193b      	adds	r3, r7, r4
 800174c:	0019      	movs	r1, r3
 800174e:	f000 fa1d 	bl	8001b8c <usart_send>
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b013      	add	sp, #76	; 0x4c
 8001758:	bd90      	pop	{r4, r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	20000024 	.word	0x20000024

08001760 <SysTick_Handler>:




void SysTick_Handler(void){
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

	// for system function's
	msTicks++;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <SysTick_Handler+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	4b02      	ldr	r3, [pc, #8]	; (8001774 <SysTick_Handler+0x14>)
 800176c:	601a      	str	r2, [r3, #0]
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20001864 	.word	0x20001864

08001778 <get_ticks>:



uint32_t get_ticks(){
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	return msTicks;
 800177c:	4b02      	ldr	r3, [pc, #8]	; (8001788 <get_ticks+0x10>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	20001864 	.word	0x20001864

0800178c <PendSV_Handler>:

// for context switch => not used
void PendSV_Handler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0

}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	task_cntrl[1].task_func();
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <TIM2_IRQHandler+0x4c>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	4798      	blx	r3
	static bool_t state = false;
	state = !state;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <TIM2_IRQHandler+0x50>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	425a      	negs	r2, r3
 80017a8:	4153      	adcs	r3, r2
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	001a      	movs	r2, r3
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <TIM2_IRQHandler+0x50>)
 80017b0:	701a      	strb	r2, [r3, #0]
	gpio_set_val(GPIOB, GPIO_15, state); // frequency check
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <TIM2_IRQHandler+0x54>)
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <TIM2_IRQHandler+0x50>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	001a      	movs	r2, r3
 80017bc:	210f      	movs	r1, #15
 80017be:	f7fe ff4d 	bl	800065c <gpio_set_val>

	 if (TIM2->SR & TIMER_SR_UIF) {
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <TIM2_IRQHandler+0x58>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	2201      	movs	r2, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	d007      	beq.n	80017de <TIM2_IRQHandler+0x46>
		 TIM2->SR &= ~TIMER_SR_UIF;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <TIM2_IRQHandler+0x58>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <TIM2_IRQHandler+0x58>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	438a      	bics	r2, r1
 80017dc:	611a      	str	r2, [r3, #16]
	 }
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20001868 	.word	0x20001868
 80017e8:	200018a4 	.word	0x200018a4
 80017ec:	20000004 	.word	0x20000004
 80017f0:	2000001c 	.word	0x2000001c

080017f4 <init_system>:

system_err_t init_system(){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0


	// Reset all used peripheral
	gpiox_reset();
 80017fa:	f7fe fe2d 	bl	8000458 <gpiox_reset>
	spix_reset();
 80017fe:	f7ff fdc5 	bl	800138c <spix_reset>
	usartx_reset();
 8001802:	f000 f8bd 	bl	8001980 <usartx_reset>
	adc_reset();
 8001806:	f7fe fc7b 	bl	8000100 <adc_reset>


	RCC_CFGR = 0;
 800180a:	4b51      	ldr	r3, [pc, #324]	; (8001950 <init_system+0x15c>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
	RCC_CR &= ~RCC_CR_PLL_ON;
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <init_system+0x160>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b4f      	ldr	r3, [pc, #316]	; (8001954 <init_system+0x160>)
 8001816:	4950      	ldr	r1, [pc, #320]	; (8001958 <init_system+0x164>)
 8001818:	400a      	ands	r2, r1
 800181a:	601a      	str	r2, [r3, #0]

	RCC_CR |= RCC_CR_HSI16_ON;
 800181c:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <init_system+0x160>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <init_system+0x160>)
 8001822:	2101      	movs	r1, #1
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
	while (!(RCC_CR & RCC_CR_HSI16_RDY)){
 8001828:	e000      	b.n	800182c <init_system+0x38>
		asm("NOP");
 800182a:	46c0      	nop			; (mov r8, r8)
	while (!(RCC_CR & RCC_CR_HSI16_RDY)){
 800182c:	4b49      	ldr	r3, [pc, #292]	; (8001954 <init_system+0x160>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2204      	movs	r2, #4
 8001832:	4013      	ands	r3, r2
 8001834:	d0f9      	beq.n	800182a <init_system+0x36>
	}

	// set HSI16 as system-clock
	RCC_CFGR |= RCC_CFGR_SW_HSI16;
 8001836:	4b46      	ldr	r3, [pc, #280]	; (8001950 <init_system+0x15c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b45      	ldr	r3, [pc, #276]	; (8001950 <init_system+0x15c>)
 800183c:	2101      	movs	r1, #1
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]
//	}
*/

	// usart2 for print - function
	usart_config_t usart_cfg;
	usart_cfg.clk_div      = 139;   // (Systemclock / Baudrate) => 16000000 / 115200
 8001842:	2108      	movs	r1, #8
 8001844:	187b      	adds	r3, r7, r1
 8001846:	228b      	movs	r2, #139	; 0x8b
 8001848:	601a      	str	r2, [r3, #0]
	usart_cfg.format       = USART_LSB_FIRST;
 800184a:	187b      	adds	r3, r7, r1
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
	usart_cfg.mode         = USART_MODE_TX;
 8001850:	187b      	adds	r3, r7, r1
 8001852:	2208      	movs	r2, #8
 8001854:	711a      	strb	r2, [r3, #4]
	usart_cfg.parity       = USART_NO_PARITY;
 8001856:	187b      	adds	r3, r7, r1
 8001858:	2200      	movs	r2, #0
 800185a:	819a      	strh	r2, [r3, #12]
	usart_cfg.word_len     = USART_WORD_LEN_8BIT;
 800185c:	187b      	adds	r3, r7, r1
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
	usart_cfg.stp_bit      = USART_STOP_1BIT;
 8001862:	187b      	adds	r3, r7, r1
 8001864:	2200      	movs	r2, #0
 8001866:	81da      	strh	r2, [r3, #14]
	usart_cfg.flow_control = USART_HW_FLOW_CONTROL_DISABLE;
 8001868:	187b      	adds	r3, r7, r1
 800186a:	2200      	movs	r2, #0
 800186c:	829a      	strh	r2, [r3, #20]
	usart_cfg.interrupt    = USART_INTERRUPT_DISABLE;
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2200      	movs	r2, #0
 8001872:	82da      	strh	r2, [r3, #22]
	usart_init(USART2, &usart_cfg);
 8001874:	4b39      	ldr	r3, [pc, #228]	; (800195c <init_system+0x168>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	187a      	adds	r2, r7, r1
 800187a:	0011      	movs	r1, r2
 800187c:	0018      	movs	r0, r3
 800187e:	f000 f8a7 	bl	80019d0 <usart_init>

	gpio_config_t gpio_cfg;
	gpio_cfg.pin         = GPIO_15;
 8001882:	003b      	movs	r3, r7
 8001884:	220f      	movs	r2, #15
 8001886:	701a      	strb	r2, [r3, #0]
	gpio_cfg.func_mode   = GPIO_FUNC_MODE_OUTPUT;
 8001888:	003b      	movs	r3, r7
 800188a:	2201      	movs	r2, #1
 800188c:	705a      	strb	r2, [r3, #1]
	gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 800188e:	003b      	movs	r3, r7
 8001890:	2200      	movs	r2, #0
 8001892:	711a      	strb	r2, [r3, #4]
	gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 8001894:	003b      	movs	r3, r7
 8001896:	2200      	movs	r2, #0
 8001898:	709a      	strb	r2, [r3, #2]
	gpio_cfg.speed_mode  = GPIO_SPEED_MODE_LOW_SPEED;
 800189a:	003b      	movs	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	70da      	strb	r2, [r3, #3]
	gpio_config(GPIOB, &gpio_cfg);
 80018a0:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <init_system+0x16c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	003a      	movs	r2, r7
 80018a6:	0011      	movs	r1, r2
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7fe fdf3 	bl	8000494 <gpio_config>


	// Enable USART1 Interrupt
	NVIC_ISER |= ISER_USART1_IRQ;
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <init_system+0x170>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <init_system+0x170>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0509      	lsls	r1, r1, #20
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
	// Enable Timer2 Interrupt
	NVIC_ISER |= ISER_TIMER2_IRQ;
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <init_system+0x170>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <init_system+0x170>)
 80018c2:	2180      	movs	r1, #128	; 0x80
 80018c4:	0209      	lsls	r1, r1, #8
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]

	// configuration timer 2
	TIM2->CR1 &= ~TIMER_CR1_CEN;
 80018ca:	4b27      	ldr	r3, [pc, #156]	; (8001968 <init_system+0x174>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <init_system+0x174>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2101      	movs	r1, #1
 80018d6:	438a      	bics	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]

	// 5 ms
	RCC_APB1ENR |= RCC_APB1ENR_TIMER2;
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <init_system+0x178>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b23      	ldr	r3, [pc, #140]	; (800196c <init_system+0x178>)
 80018e0:	2101      	movs	r1, #1
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
	TIM2->PSC = 7999;
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <init_system+0x174>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a21      	ldr	r2, [pc, #132]	; (8001970 <init_system+0x17c>)
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 9;
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <init_system+0x174>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2209      	movs	r2, #9
 80018f4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER  |= TIMER_DIER_UIE;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <init_system+0x174>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <init_system+0x174>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2101      	movs	r1, #1
 8001902:	430a      	orrs	r2, r1
 8001904:	60da      	str	r2, [r3, #12]

	// configuration SysTick
	STK->CSR = (uint32_t) 0x00;
 8001906:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <init_system+0x180>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
	STK->RVR = (uint32_t) 15999;   //  => (16000000 / 1000) - 1
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <init_system+0x180>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a19      	ldr	r2, [pc, #100]	; (8001978 <init_system+0x184>)
 8001914:	605a      	str	r2, [r3, #4]
	STK->CVR = (uint32_t) 0x00;
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <init_system+0x180>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
	STK->CSR |= (SYSTICK_INTR_ENABLE | SYSTICK_ENABLE_PROCESSOR_CLOCK);
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <init_system+0x180>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <init_system+0x180>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2106      	movs	r1, #6
 800192a:	430a      	orrs	r2, r1
 800192c:	601a      	str	r2, [r3, #0]
	STK->CSR |= SYSTICK_ENABLE;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <init_system+0x180>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <init_system+0x180>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]



	print("SYSTEM: Initialization success");
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <init_system+0x188>)
 8001940:	0018      	movs	r0, r3
 8001942:	f7ff fecb 	bl	80016dc <print>


	return SYSTEM_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	0018      	movs	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	b008      	add	sp, #32
 800194e:	bd80      	pop	{r7, pc}
 8001950:	4002100c 	.word	0x4002100c
 8001954:	40021000 	.word	0x40021000
 8001958:	feffffff 	.word	0xfeffffff
 800195c:	20000024 	.word	0x20000024
 8001960:	20000004 	.word	0x20000004
 8001964:	e000e100 	.word	0xe000e100
 8001968:	2000001c 	.word	0x2000001c
 800196c:	40021038 	.word	0x40021038
 8001970:	00001f3f 	.word	0x00001f3f
 8001974:	20000018 	.word	0x20000018
 8001978:	00003e7f 	.word	0x00003e7f
 800197c:	08002234 	.word	0x08002234

08001980 <usartx_reset>:

usart_reg_t *USART1 = (usart_reg_t *) USART1_BASE;
usart_reg_t *USART2 = (usart_reg_t *) USART2_BASE;


void usartx_reset(){
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	// uint32_t temp = (APBx_USART1 | APBx_USART6);
	RCC_APB2RSTR |= APBx_USART1;
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <usartx_reset+0x40>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <usartx_reset+0x40>)
 800198a:	2180      	movs	r1, #128	; 0x80
 800198c:	01c9      	lsls	r1, r1, #7
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
	RCC_APB2RSTR &= ~APBx_USART1;
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <usartx_reset+0x40>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <usartx_reset+0x40>)
 8001998:	490a      	ldr	r1, [pc, #40]	; (80019c4 <usartx_reset+0x44>)
 800199a:	400a      	ands	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

	// temp = (APBx_USART2 | APBx_USART3 | APBx_USART4 | APBx_USART5);

	RCC_APB1RSTR |= APBx_USART2;
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <usartx_reset+0x48>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <usartx_reset+0x48>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0289      	lsls	r1, r1, #10
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]
	RCC_APB1RSTR &= ~APBx_USART2;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <usartx_reset+0x48>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <usartx_reset+0x48>)
 80019b2:	4906      	ldr	r1, [pc, #24]	; (80019cc <usartx_reset+0x4c>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	40021024 	.word	0x40021024
 80019c4:	ffffbfff 	.word	0xffffbfff
 80019c8:	40021028 	.word	0x40021028
 80019cc:	fffdffff 	.word	0xfffdffff

080019d0 <usart_init>:


void usart_init(usart_reg_t *pDrv, usart_config_t *pConfig){
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]

	gpio_pin_t pin_tx, pin_rx;
	gpio_pin_t pin_cts, pin_rts;

	pDrv->CR1 &= ~USART_CR1_UE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2201      	movs	r2, #1
 80019e0:	4393      	bics	r3, r2
 80019e2:	001a      	movs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	601a      	str	r2, [r3, #0]

	if (pDrv == USART1){
 80019e8:	4b64      	ldr	r3, [pc, #400]	; (8001b7c <usart_init+0x1ac>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d117      	bne.n	8001a22 <usart_init+0x52>
		RCC_APB2ENR 	|= APBx_USART1;
 80019f2:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <usart_init+0x1b0>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b62      	ldr	r3, [pc, #392]	; (8001b80 <usart_init+0x1b0>)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	01c9      	lsls	r1, r1, #7
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
		pin_tx  = GPIO_9;
 8001a00:	2317      	movs	r3, #23
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	2209      	movs	r2, #9
 8001a06:	701a      	strb	r2, [r3, #0]
		pin_rx  = GPIO_10;
 8001a08:	2316      	movs	r3, #22
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	220a      	movs	r2, #10
 8001a0e:	701a      	strb	r2, [r3, #0]
		pin_cts = GPIO_11;
 8001a10:	2315      	movs	r3, #21
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	220b      	movs	r2, #11
 8001a16:	701a      	strb	r2, [r3, #0]
		pin_rts = GPIO_12;
 8001a18:	2314      	movs	r3, #20
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	220c      	movs	r2, #12
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	e016      	b.n	8001a50 <usart_init+0x80>
	}else{
		// Flow Control on USART2 not possible with the Test Board-Layout (Nucleo F070)
		RCC_APB1ENR  |= APBx_USART2;
 8001a22:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <usart_init+0x1b4>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <usart_init+0x1b4>)
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0289      	lsls	r1, r1, #10
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
		pin_tx = GPIO_2;
 8001a30:	2317      	movs	r3, #23
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	2202      	movs	r2, #2
 8001a36:	701a      	strb	r2, [r3, #0]
		pin_rx = GPIO_3;
 8001a38:	2316      	movs	r3, #22
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	701a      	strb	r2, [r3, #0]
		pin_cts = GPIO_0;
 8001a40:	2315      	movs	r3, #21
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
		pin_rts = GPIO_1;
 8001a48:	2314      	movs	r3, #20
 8001a4a:	18fb      	adds	r3, r7, r3
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
	};

	gpio_config_t gpio_cfg;
	gpio_cfg.pin         = pin_tx;
 8001a50:	210c      	movs	r1, #12
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	2217      	movs	r2, #23
 8001a56:	18ba      	adds	r2, r7, r2
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	701a      	strb	r2, [r3, #0]
	gpio_cfg.func_mode   = GPIO_FUNC_MODE_AF4;
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	2212      	movs	r2, #18
 8001a60:	705a      	strb	r2, [r3, #1]
	gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8001a62:	187b      	adds	r3, r7, r1
 8001a64:	2200      	movs	r2, #0
 8001a66:	711a      	strb	r2, [r3, #4]
	gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 8001a68:	187b      	adds	r3, r7, r1
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	709a      	strb	r2, [r3, #2]
	gpio_cfg.speed_mode  = GPIO_SPEED_MODE_HIGH_SPEED;
 8001a6e:	187b      	adds	r3, r7, r1
 8001a70:	2202      	movs	r2, #2
 8001a72:	70da      	strb	r2, [r3, #3]
	gpio_config(GPIOA, &gpio_cfg);
 8001a74:	4b44      	ldr	r3, [pc, #272]	; (8001b88 <usart_init+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	000c      	movs	r4, r1
 8001a7a:	187a      	adds	r2, r7, r1
 8001a7c:	0011      	movs	r1, r2
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7fe fd08 	bl	8000494 <gpio_config>

	gpio_cfg.pin         = pin_rx;
 8001a84:	0021      	movs	r1, r4
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	2216      	movs	r2, #22
 8001a8a:	18ba      	adds	r2, r7, r2
 8001a8c:	7812      	ldrb	r2, [r2, #0]
 8001a8e:	701a      	strb	r2, [r3, #0]
	gpio_cfg.func_mode   = GPIO_FUNC_MODE_AF4;
 8001a90:	000c      	movs	r4, r1
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	2212      	movs	r2, #18
 8001a96:	705a      	strb	r2, [r3, #1]
	gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8001a98:	193b      	adds	r3, r7, r4
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	711a      	strb	r2, [r3, #4]
	gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 8001a9e:	193b      	adds	r3, r7, r4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	709a      	strb	r2, [r3, #2]
	gpio_cfg.speed_mode  = GPIO_SPEED_MODE_HIGH_SPEED;
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	70da      	strb	r2, [r3, #3]
	gpio_config(GPIOA, &gpio_cfg);
 8001aaa:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <usart_init+0x1b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	193a      	adds	r2, r7, r4
 8001ab0:	0011      	movs	r1, r2
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f7fe fcee 	bl	8000494 <gpio_config>

	if (pConfig->flow_control == USART_HW_FLOW_CONTROL_ENABLE){
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	8a9a      	ldrh	r2, [r3, #20]
 8001abc:	23c0      	movs	r3, #192	; 0xc0
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d132      	bne.n	8001b2a <usart_init+0x15a>
		gpio_cfg.pin         = pin_cts;
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	2215      	movs	r2, #21
 8001ac8:	18ba      	adds	r2, r7, r2
 8001aca:	7812      	ldrb	r2, [r2, #0]
 8001acc:	701a      	strb	r2, [r3, #0]
		gpio_cfg.func_mode   = GPIO_FUNC_MODE_AF4;
 8001ace:	0021      	movs	r1, r4
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	2212      	movs	r2, #18
 8001ad4:	705a      	strb	r2, [r3, #1]
		gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8001ad6:	187b      	adds	r3, r7, r1
 8001ad8:	2200      	movs	r2, #0
 8001ada:	711a      	strb	r2, [r3, #4]
		gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	2200      	movs	r2, #0
 8001ae0:	709a      	strb	r2, [r3, #2]
		gpio_cfg.speed_mode  = GPIO_SPEED_MODE_HIGH_SPEED;
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	70da      	strb	r2, [r3, #3]
		gpio_config(GPIOA, &gpio_cfg);
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <usart_init+0x1b8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	000c      	movs	r4, r1
 8001aee:	187a      	adds	r2, r7, r1
 8001af0:	0011      	movs	r1, r2
 8001af2:	0018      	movs	r0, r3
 8001af4:	f7fe fcce 	bl	8000494 <gpio_config>

		gpio_cfg.pin         = pin_rts;
 8001af8:	0021      	movs	r1, r4
 8001afa:	187b      	adds	r3, r7, r1
 8001afc:	2214      	movs	r2, #20
 8001afe:	18ba      	adds	r2, r7, r2
 8001b00:	7812      	ldrb	r2, [r2, #0]
 8001b02:	701a      	strb	r2, [r3, #0]
		gpio_cfg.func_mode   = GPIO_FUNC_MODE_AF4;
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	2212      	movs	r2, #18
 8001b08:	705a      	strb	r2, [r3, #1]
		gpio_cfg.output_mode = GPIO_OUTPUT_MODE_PUSH_PULL;
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	711a      	strb	r2, [r3, #4]
		gpio_cfg.pull_mode   = GPIO_PULL_MODE_NO_PULL;
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2200      	movs	r2, #0
 8001b14:	709a      	strb	r2, [r3, #2]
		gpio_cfg.speed_mode  = GPIO_SPEED_MODE_HIGH_SPEED;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2202      	movs	r2, #2
 8001b1a:	70da      	strb	r2, [r3, #3]
		gpio_config(GPIOA, &gpio_cfg);
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <usart_init+0x1b8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	187a      	adds	r2, r7, r1
 8001b22:	0011      	movs	r1, r2
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7fe fcb5 	bl	8000494 <gpio_config>
	}

	pDrv->CR1 = (pConfig->mode | pConfig->parity | pConfig->word_len | pConfig->interrupt);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	791b      	ldrb	r3, [r3, #4]
 8001b2e:	001a      	movs	r2, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	899b      	ldrh	r3, [r3, #12]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	001a      	movs	r2, r3
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	8ad2      	ldrh	r2, [r2, #22]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	601a      	str	r2, [r3, #0]
	pDrv->BRR = pConfig->clk_div;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	60da      	str	r2, [r3, #12]
	pDrv->CR2 = (pConfig->format | pConfig->stp_bit);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	89d2      	ldrh	r2, [r2, #14]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	605a      	str	r2, [r3, #4]
	pDrv->CR3 = pConfig->flow_control;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	8a9b      	ldrh	r3, [r3, #20]
 8001b62:	001a      	movs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]


	pDrv->CR1 |= (USART_CR1_UE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	601a      	str	r2, [r3, #0]

}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b007      	add	sp, #28
 8001b7a:	bd90      	pop	{r4, r7, pc}
 8001b7c:	20000020 	.word	0x20000020
 8001b80:	40021034 	.word	0x40021034
 8001b84:	40021038 	.word	0x40021038
 8001b88:	20000000 	.word	0x20000000

08001b8c <usart_send>:


system_err_t usart_send(usart_reg_t *pDrv, uint8_t *pTxBuf, uint8_t len){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	701a      	strb	r2, [r3, #0]
	uint32_t ticks_pre = get_ticks();
 8001b9a:	f7ff fded 	bl	8001778 <get_ticks>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	613b      	str	r3, [r7, #16]
	for(uint8_t i = 0; i < len; i++){
 8001ba2:	2317      	movs	r3, #23
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e01d      	b.n	8001be8 <usart_send+0x5c>
		while(!(pDrv->ISR & USART_ISR_TXE)){
		if((get_ticks() - ticks_pre) >= USART_TIMEOUT){
 8001bac:	f7ff fde4 	bl	8001778 <get_ticks>
 8001bb0:	0002      	movs	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad2      	subs	r2, r2, r3
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	015b      	lsls	r3, r3, #5
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d301      	bcc.n	8001bc2 <usart_send+0x36>
				return USART_SEND_TIMEOUT;
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	e01a      	b.n	8001bf8 <usart_send+0x6c>
		while(!(pDrv->ISR & USART_ISR_TXE)){
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d0ef      	beq.n	8001bac <usart_send+0x20>
			}
		}
		pDrv->TDR = pTxBuf[i];
 8001bcc:	2117      	movs	r1, #23
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	18d3      	adds	r3, r2, r3
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	001a      	movs	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28
	for(uint8_t i = 0; i < len; i++){
 8001bde:	187b      	adds	r3, r7, r1
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	3201      	adds	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	2317      	movs	r3, #23
 8001bea:	18fa      	adds	r2, r7, r3
 8001bec:	1dfb      	adds	r3, r7, #7
 8001bee:	7812      	ldrb	r2, [r2, #0]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d3e5      	bcc.n	8001bc2 <usart_send+0x36>
//		if((get_ticks() - ticks_pre) >= USART_TIMEOUT){
//			return USART_SEND_TIMEOUT;
//		}
//	}

	return SYSTEM_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b006      	add	sp, #24
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <usart_receive>:


// this function is used in interrupt routine
system_err_t usart_receive(usart_reg_t *pDrv, uint8_t *pData){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	while(!(pDrv->ISR & USART_ISR_RXNE)){
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2220      	movs	r2, #32
 8001c12:	4013      	ands	r3, r2
 8001c14:	d10c      	bne.n	8001c30 <usart_receive+0x30>
		// time delay without SysTick, because USART ISR can have higher priority
		for (uint32_t j = 0; j < 44000; j++){
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	e003      	b.n	8001c24 <usart_receive+0x24>
			asm("NOP");
 8001c1c:	46c0      	nop			; (mov r8, r8)
		for (uint32_t j = 0; j < 44000; j++){
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3301      	adds	r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <usart_receive+0x50>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d9f7      	bls.n	8001c1c <usart_receive+0x1c>
		}
		return USART_RECEIVE_TIMEOUT;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	e00b      	b.n	8001c48 <usart_receive+0x48>
	}
	*pData = (uint8_t)pDrv->RDR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	701a      	strb	r2, [r3, #0]
	// clear overrun flag
	pDrv->ICR |= USART_ICR_ORECF;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	2208      	movs	r2, #8
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	621a      	str	r2, [r3, #32]
	return SYSTEM_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b004      	add	sp, #16
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	0000abdf 	.word	0x0000abdf

08001c54 <usart_send_string>:



system_err_t usart_send_string(usart_reg_t *pDrv, const char *string){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
	uint8_t TxBuf[32];
	uint8_t len = 0;
 8001c5e:	232f      	movs	r3, #47	; 0x2f
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]

	//copy
	while (*string != 0){
 8001c66:	e00e      	b.n	8001c86 <usart_send_string+0x32>
		TxBuf[len] = *string++;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	603a      	str	r2, [r7, #0]
 8001c6e:	202f      	movs	r0, #47	; 0x2f
 8001c70:	183a      	adds	r2, r7, r0
 8001c72:	7812      	ldrb	r2, [r2, #0]
 8001c74:	7819      	ldrb	r1, [r3, #0]
 8001c76:	2308      	movs	r3, #8
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	5499      	strb	r1, [r3, r2]
		len++;
 8001c7c:	183b      	adds	r3, r7, r0
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	183b      	adds	r3, r7, r0
 8001c82:	3201      	adds	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
	while (*string != 0){
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1ec      	bne.n	8001c68 <usart_send_string+0x14>
	}
	if (len > 15){return USART_SEND_STRING_OVERFLOW;}
 8001c8e:	232f      	movs	r3, #47	; 0x2f
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d901      	bls.n	8001c9c <usart_send_string+0x48>
 8001c98:	2309      	movs	r3, #9
 8001c9a:	e040      	b.n	8001d1e <usart_send_string+0xca>
	uint32_t ticks_pre = get_ticks();
 8001c9c:	f7ff fd6c 	bl	8001778 <get_ticks>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
		for(uint8_t i = 0; i < len; i++){
 8001ca4:	232e      	movs	r3, #46	; 0x2e
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	e01d      	b.n	8001cea <usart_send_string+0x96>
			while(!(pDrv->ISR & USART_ISR_TXE)){
				if((get_ticks() - ticks_pre) >= USART_TIMEOUT){
 8001cae:	f7ff fd63 	bl	8001778 <get_ticks>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb6:	1ad2      	subs	r2, r2, r3
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	015b      	lsls	r3, r3, #5
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d301      	bcc.n	8001cc4 <usart_send_string+0x70>
					return USART_SEND_TIMEOUT;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	e02c      	b.n	8001d1e <usart_send_string+0xca>
			while(!(pDrv->ISR & USART_ISR_TXE)){
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	2280      	movs	r2, #128	; 0x80
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d0ef      	beq.n	8001cae <usart_send_string+0x5a>
				}
			}
	pDrv->TDR = TxBuf[i];
 8001cce:	212e      	movs	r1, #46	; 0x2e
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	18ba      	adds	r2, r7, r2
 8001cd8:	5cd3      	ldrb	r3, [r2, r3]
 8001cda:	001a      	movs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
		for(uint8_t i = 0; i < len; i++){
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	3201      	adds	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	232e      	movs	r3, #46	; 0x2e
 8001cec:	18fa      	adds	r2, r7, r3
 8001cee:	232f      	movs	r3, #47	; 0x2f
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	7812      	ldrb	r2, [r2, #0]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d3e4      	bcc.n	8001cc4 <usart_send_string+0x70>
		}
	while(!(pDrv->ISR & USART_ISR_TC)){
 8001cfa:	e00a      	b.n	8001d12 <usart_send_string+0xbe>
		if((get_ticks() - ticks_pre) >= USART_TIMEOUT){
 8001cfc:	f7ff fd3c 	bl	8001778 <get_ticks>
 8001d00:	0002      	movs	r2, r0
 8001d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d04:	1ad2      	subs	r2, r2, r3
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	015b      	lsls	r3, r3, #5
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d301      	bcc.n	8001d12 <usart_send_string+0xbe>
			return USART_SEND_TIMEOUT;
 8001d0e:	2307      	movs	r3, #7
 8001d10:	e005      	b.n	8001d1e <usart_send_string+0xca>
	while(!(pDrv->ISR & USART_ISR_TC)){
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	2240      	movs	r2, #64	; 0x40
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d0ef      	beq.n	8001cfc <usart_send_string+0xa8>
		}
	}
	return SYSTEM_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b00c      	add	sp, #48	; 0x30
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d2c:	e000      	b.n	8001d30 <Reset_Handler+0x8>
 8001d2e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d30:	480c      	ldr	r0, [pc, #48]	; (8001d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d32:	490d      	ldr	r1, [pc, #52]	; (8001d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d34:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <LoopForever+0xe>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d48:	4c0a      	ldr	r4, [pc, #40]	; (8001d74 <LoopForever+0x16>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d56:	f000 f811 	bl	8001d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d5a:	f7ff fb0f 	bl	800137c <main>

08001d5e <LoopForever>:

LoopForever:
  b LoopForever
 8001d5e:	e7fe      	b.n	8001d5e <LoopForever>
  ldr   r0, =_estack
 8001d60:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d68:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001d6c:	08002288 	.word	0x08002288
  ldr r2, =_sbss
 8001d70:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001d74:	200018a8 	.word	0x200018a8

08001d78 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC_COMP_IRQHandler>
	...

08001d7c <__libc_init_array>:
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	2600      	movs	r6, #0
 8001d80:	4d0c      	ldr	r5, [pc, #48]	; (8001db4 <__libc_init_array+0x38>)
 8001d82:	4c0d      	ldr	r4, [pc, #52]	; (8001db8 <__libc_init_array+0x3c>)
 8001d84:	1b64      	subs	r4, r4, r5
 8001d86:	10a4      	asrs	r4, r4, #2
 8001d88:	42a6      	cmp	r6, r4
 8001d8a:	d109      	bne.n	8001da0 <__libc_init_array+0x24>
 8001d8c:	2600      	movs	r6, #0
 8001d8e:	f000 f819 	bl	8001dc4 <_init>
 8001d92:	4d0a      	ldr	r5, [pc, #40]	; (8001dbc <__libc_init_array+0x40>)
 8001d94:	4c0a      	ldr	r4, [pc, #40]	; (8001dc0 <__libc_init_array+0x44>)
 8001d96:	1b64      	subs	r4, r4, r5
 8001d98:	10a4      	asrs	r4, r4, #2
 8001d9a:	42a6      	cmp	r6, r4
 8001d9c:	d105      	bne.n	8001daa <__libc_init_array+0x2e>
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
 8001da0:	00b3      	lsls	r3, r6, #2
 8001da2:	58eb      	ldr	r3, [r5, r3]
 8001da4:	4798      	blx	r3
 8001da6:	3601      	adds	r6, #1
 8001da8:	e7ee      	b.n	8001d88 <__libc_init_array+0xc>
 8001daa:	00b3      	lsls	r3, r6, #2
 8001dac:	58eb      	ldr	r3, [r5, r3]
 8001dae:	4798      	blx	r3
 8001db0:	3601      	adds	r6, #1
 8001db2:	e7f2      	b.n	8001d9a <__libc_init_array+0x1e>
 8001db4:	08002280 	.word	0x08002280
 8001db8:	08002280 	.word	0x08002280
 8001dbc:	08002280 	.word	0x08002280
 8001dc0:	08002284 	.word	0x08002284

08001dc4 <_init>:
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dca:	bc08      	pop	{r3}
 8001dcc:	469e      	mov	lr, r3
 8001dce:	4770      	bx	lr

08001dd0 <_fini>:
 8001dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dd6:	bc08      	pop	{r3}
 8001dd8:	469e      	mov	lr, r3
 8001dda:	4770      	bx	lr
